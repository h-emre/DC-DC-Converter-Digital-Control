#include "main.h"

I2C_HandleTypeDef hi2c3;
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C3_Init(void);

HAL_StatusTypeDef INA228_Init(INA228_HandleTypeDef *hina228, I2C_HandleTypeDef *hi2c, uint16_t addr, uint16_t average, uint16_t busConvTime, uint16_t shuntConvTime, uint16_t mode, float rShuntValue, float iMax)
{
    hina228->hi2c = hi2c;
    hina228->addr = addr;
    hina228->average = average;
    hina228->busConvTime = busConvTime;
    hina228->shuntConvTime = shuntConvTime;
    hina228->mode = mode;
    hina228->rShuntValue = rShuntValue;
    hina228->iMax = iMax;

    // Calculation of calibration value
    hina228->calibrationValue = (uint16_t)(0.00512 / (hina228->rShuntValue * (1 << hina228->average)));

    if (INA228_Reset(hina228) != HAL_OK)
    {
        return HAL_ERROR;
    }

    return HAL_OK;
}

HAL_StatusTypeDef INA228_Reset(INA228_HandleTypeDef *hina228)
{
    uint16_t reset = INA228_RESET;
    uint8_t data[2];

    data[0] = reset >> 8;
    data[1] = reset & 0xff;

    if (HAL_I2C_Mem_Write(hina228->hi2c, hina228->addr, CONFIG_REG, I2C_MEMADD_SIZE_16BIT, data, 2, 1000) != HAL_OK)
    {
        return HAL_ERROR;
    }

    return HAL_OK;
}

HAL_StatusTypeDef INA228_Config(INA228_HandleTypeDef *hina228)
{
    uint16_t config = (hina228->average << 9) | (hina228->busConvTime << 6) | (hina228->shuntConvTime << 3) | hina228->mode;
    uint8_t data[2];

    data[0] = config >> 8;
    data[1] = config & 0xff;

    // Write config register
    if (HAL_I2C_Mem_Write(hina228->hi2c, hina228->addr, CONFIG_REG, I2C_MEMADD_SIZE_16BIT, data, 2, 1000) != HAL_OK)
    {
        return HAL_ERROR;
    }

    // Write calibration register
    data[0] = hina228->calibrationValue >> 8;
    data[1] = hina228->calibrationValue & 0xff;

    if (HAL_I2C_Mem_Write(hina228->hi2c, hina228->addr, CALIBRATION_REG, I2C_MEMADD_SIZE_16BIT, data, 2, 1000) != HAL_OK)
    {
        return HAL_ERROR;
    }

    return HAL_OK;
}

HAL_StatusTypeDef INA228_ReadShuntVoltage(INA228_HandleTypeDef *hina228, float *voltage)
{
    uint16_t shuntVoltageRaw;
    uint8_t data[2];

    // Read shunt voltage register
    if (HAL_I2C_Mem_Read(hina228->hi2c, hina228->addr, SHUNT_VOLTAGE_REG, I2C_MEMADD_SIZE_16BIT, data, 2, 1000) != HAL_OK)
    {
        return HAL_ERROR;
    }

    shuntVoltageRaw = (data[0] << 8) | data[1];

    // Calculate shunt voltage in volts
    *voltage = (float)shuntVoltageRaw * hina228->shuntVoltageLSB;

    return HAL_OK;
}

/// @brief Reads the current from the INA228 device.
/// @param hina228 Pointer to the INA228 handle structure.
/// @param current Pointer to the variable to store the current (in Amperes).
/// @return HAL status.
HAL_StatusTypeDef INA228_ReadCurrent(INA228_HandleTypeDef *hina228, float *current)
{
    uint16_t currentRaw;
    uint8_t data[2];

    // Read current register
    if (HAL_I2C_Mem_Read(hina228->hi2c, hina228->addr, CURRENT_REG, I2C_MEMADD_SIZE_16BIT, data, 2, 1000) != HAL_OK)
    {
        return HAL_ERROR;
    }

    currentRaw = (data[0] << 8) | data[1];

    // Calculate current in Amps
    *current = (float)currentRaw * hina228->currentLSB;

    return HAL_OK;
}

/// @brief Reads the power from the INA228 device.
/// @param hina228 Pointer to the INA228 handle structure.
/// @param power Pointer to the variable to store the power (in Watts).
/// @return HAL status.
HAL_StatusTypeDef INA228_ReadPower(INA228_HandleTypeDef *hina228, float *power)
{
    uint16_t powerRaw;
    uint8_t data[2];

    // Read power register
    if (HAL_I2C_Mem_Read(hina228->hi2c, hina228->addr, POWER_REG, I2C_MEMADD_SIZE_16BIT, data, 2, 1000) != HAL_OK)
    {
        return HAL_ERROR;
    }

    powerRaw = (data[0] << 8) | data[1];

    // Calculate power in Watts
    *power = (float)powerRaw * hina228->powerLSB;

    return HAL_OK;
}

/// @brief Reads the bus voltage from the INA228 device.
/// @param hina228 Pointer to the INA228 handle structure.
/// @param voltage Pointer to the variable to store the bus voltage (in Volts).
/// @return HAL status.
HAL_StatusTypeDef INA228_ReadBusVoltage(INA228_HandleTypeDef *hina228, float *voltage)
{
    uint16_t busVoltageRaw;
    uint8_t data[2];

    // Read bus voltage register
    if (HAL_I2C_Mem_Read(hina228->hi2c, hina228->addr, BUS_VOLTAGE_REG, I2C_MEMADD_SIZE_16BIT, data, 2, 1000) != HAL_OK)
    {
        return HAL_ERROR;
    }

    busVoltageRaw = (data[0] << 8) | data[1];

    // Calculate bus voltage in Volts
    *voltage = (float)busVoltageRaw * hina228->busVoltageLSB;

    return HAL_OK;
}

int main(void)
{
	INA228_HandleTypeDef hina228;
	uint16_t average = 0x0400;
	uint16_t busConvTime =0x0080;
	uint16_t shuntConvTime = 0x0010;
	uint16_t mode = 0x0001; //shunt voltaj trigger
	float rShuntValue = 0.022;
	float iMax = 3.00;
	uint16_t addr = 0x40;
	float *voltage ;
	float *current ;
  HAL_Init();

  SystemClock_Config();
  MX_GPIO_Init();
  MX_I2C3_Init();

  INA228_Init(&hina228 ,&hi2c3,addr, average, busConvTime, shuntConvTime, mode, rShuntValue, iMax );
  INA228_Config(&hina228);
  while (1)
  {
	  INA228_ReadShuntVoltage(&hina228, &voltage);
	  HAL_Delay(1000);
	  INA228_ReadCurrent(&hina228, &current);
	  HAL_Delay(1000);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
  hi2c3.Init.ClockSpeed = 100000;
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c3.Init.OwnAddress1 = 128;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
