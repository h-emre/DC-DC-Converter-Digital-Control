
Digital_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004270  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004408  08004408  00005408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004420  08004420  00006048  2**0
                  CONTENTS
  4 .ARM          00000008  08004420  08004420  00005420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004428  08004428  00006048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004428  08004428  00005428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800442c  0800442c  0000542c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  08004430  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000048  08004478  00006048  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08004478  00006230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb02  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e79  00000000  00000000  00012b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  000149f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a49  00000000  00000000  00015728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016759  00000000  00000000  00016171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103a0  00000000  00000000  0002c8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cf02  00000000  00000000  0003cc6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9b6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003960  00000000  00000000  000c9bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000cd510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000048 	.word	0x20000048
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080043f0 	.word	0x080043f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000004c 	.word	0x2000004c
 80001d4:	080043f0 	.word	0x080043f0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b96a 	b.w	8000db0 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9d08      	ldr	r5, [sp, #32]
 8000afa:	460c      	mov	r4, r1
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d14e      	bne.n	8000b9e <__udivmoddi4+0xaa>
 8000b00:	4694      	mov	ip, r2
 8000b02:	458c      	cmp	ip, r1
 8000b04:	4686      	mov	lr, r0
 8000b06:	fab2 f282 	clz	r2, r2
 8000b0a:	d962      	bls.n	8000bd2 <__udivmoddi4+0xde>
 8000b0c:	b14a      	cbz	r2, 8000b22 <__udivmoddi4+0x2e>
 8000b0e:	f1c2 0320 	rsb	r3, r2, #32
 8000b12:	4091      	lsls	r1, r2
 8000b14:	fa20 f303 	lsr.w	r3, r0, r3
 8000b18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1c:	4319      	orrs	r1, r3
 8000b1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b26:	fa1f f68c 	uxth.w	r6, ip
 8000b2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b32:	fb07 1114 	mls	r1, r7, r4, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb04 f106 	mul.w	r1, r4, r6
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x64>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b4a:	f080 8112 	bcs.w	8000d72 <__udivmoddi4+0x27e>
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	f240 810f 	bls.w	8000d72 <__udivmoddi4+0x27e>
 8000b54:	3c02      	subs	r4, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a59      	subs	r1, r3, r1
 8000b5a:	fa1f f38e 	uxth.w	r3, lr
 8000b5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b62:	fb07 1110 	mls	r1, r7, r0, r1
 8000b66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b6a:	fb00 f606 	mul.w	r6, r0, r6
 8000b6e:	429e      	cmp	r6, r3
 8000b70:	d90a      	bls.n	8000b88 <__udivmoddi4+0x94>
 8000b72:	eb1c 0303 	adds.w	r3, ip, r3
 8000b76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b7a:	f080 80fc 	bcs.w	8000d76 <__udivmoddi4+0x282>
 8000b7e:	429e      	cmp	r6, r3
 8000b80:	f240 80f9 	bls.w	8000d76 <__udivmoddi4+0x282>
 8000b84:	4463      	add	r3, ip
 8000b86:	3802      	subs	r0, #2
 8000b88:	1b9b      	subs	r3, r3, r6
 8000b8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b8e:	2100      	movs	r1, #0
 8000b90:	b11d      	cbz	r5, 8000b9a <__udivmoddi4+0xa6>
 8000b92:	40d3      	lsrs	r3, r2
 8000b94:	2200      	movs	r2, #0
 8000b96:	e9c5 3200 	strd	r3, r2, [r5]
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d905      	bls.n	8000bae <__udivmoddi4+0xba>
 8000ba2:	b10d      	cbz	r5, 8000ba8 <__udivmoddi4+0xb4>
 8000ba4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4608      	mov	r0, r1
 8000bac:	e7f5      	b.n	8000b9a <__udivmoddi4+0xa6>
 8000bae:	fab3 f183 	clz	r1, r3
 8000bb2:	2900      	cmp	r1, #0
 8000bb4:	d146      	bne.n	8000c44 <__udivmoddi4+0x150>
 8000bb6:	42a3      	cmp	r3, r4
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xcc>
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	f0c0 80f0 	bcc.w	8000da0 <__udivmoddi4+0x2ac>
 8000bc0:	1a86      	subs	r6, r0, r2
 8000bc2:	eb64 0303 	sbc.w	r3, r4, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	2d00      	cmp	r5, #0
 8000bca:	d0e6      	beq.n	8000b9a <__udivmoddi4+0xa6>
 8000bcc:	e9c5 6300 	strd	r6, r3, [r5]
 8000bd0:	e7e3      	b.n	8000b9a <__udivmoddi4+0xa6>
 8000bd2:	2a00      	cmp	r2, #0
 8000bd4:	f040 8090 	bne.w	8000cf8 <__udivmoddi4+0x204>
 8000bd8:	eba1 040c 	sub.w	r4, r1, ip
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	fa1f f78c 	uxth.w	r7, ip
 8000be4:	2101      	movs	r1, #1
 8000be6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bee:	fb08 4416 	mls	r4, r8, r6, r4
 8000bf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf6:	fb07 f006 	mul.w	r0, r7, r6
 8000bfa:	4298      	cmp	r0, r3
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x11c>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x11a>
 8000c08:	4298      	cmp	r0, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2b4>
 8000c0e:	4626      	mov	r6, r4
 8000c10:	1a1c      	subs	r4, r3, r0
 8000c12:	fa1f f38e 	uxth.w	r3, lr
 8000c16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c22:	fb00 f707 	mul.w	r7, r0, r7
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x148>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x146>
 8000c34:	429f      	cmp	r7, r3
 8000c36:	f200 80b0 	bhi.w	8000d9a <__udivmoddi4+0x2a6>
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	1bdb      	subs	r3, r3, r7
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	e7a5      	b.n	8000b90 <__udivmoddi4+0x9c>
 8000c44:	f1c1 0620 	rsb	r6, r1, #32
 8000c48:	408b      	lsls	r3, r1
 8000c4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c4e:	431f      	orrs	r7, r3
 8000c50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c54:	fa04 f301 	lsl.w	r3, r4, r1
 8000c58:	ea43 030c 	orr.w	r3, r3, ip
 8000c5c:	40f4      	lsrs	r4, r6
 8000c5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c62:	0c38      	lsrs	r0, r7, #16
 8000c64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c68:	fbb4 fef0 	udiv	lr, r4, r0
 8000c6c:	fa1f fc87 	uxth.w	ip, r7
 8000c70:	fb00 441e 	mls	r4, r0, lr, r4
 8000c74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c78:	fb0e f90c 	mul.w	r9, lr, ip
 8000c7c:	45a1      	cmp	r9, r4
 8000c7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x1a6>
 8000c84:	193c      	adds	r4, r7, r4
 8000c86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c8a:	f080 8084 	bcs.w	8000d96 <__udivmoddi4+0x2a2>
 8000c8e:	45a1      	cmp	r9, r4
 8000c90:	f240 8081 	bls.w	8000d96 <__udivmoddi4+0x2a2>
 8000c94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	eba4 0409 	sub.w	r4, r4, r9
 8000c9e:	fa1f f983 	uxth.w	r9, r3
 8000ca2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ca6:	fb00 4413 	mls	r4, r0, r3, r4
 8000caa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cb2:	45a4      	cmp	ip, r4
 8000cb4:	d907      	bls.n	8000cc6 <__udivmoddi4+0x1d2>
 8000cb6:	193c      	adds	r4, r7, r4
 8000cb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cbc:	d267      	bcs.n	8000d8e <__udivmoddi4+0x29a>
 8000cbe:	45a4      	cmp	ip, r4
 8000cc0:	d965      	bls.n	8000d8e <__udivmoddi4+0x29a>
 8000cc2:	3b02      	subs	r3, #2
 8000cc4:	443c      	add	r4, r7
 8000cc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cca:	fba0 9302 	umull	r9, r3, r0, r2
 8000cce:	eba4 040c 	sub.w	r4, r4, ip
 8000cd2:	429c      	cmp	r4, r3
 8000cd4:	46ce      	mov	lr, r9
 8000cd6:	469c      	mov	ip, r3
 8000cd8:	d351      	bcc.n	8000d7e <__udivmoddi4+0x28a>
 8000cda:	d04e      	beq.n	8000d7a <__udivmoddi4+0x286>
 8000cdc:	b155      	cbz	r5, 8000cf4 <__udivmoddi4+0x200>
 8000cde:	ebb8 030e 	subs.w	r3, r8, lr
 8000ce2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ce6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cea:	40cb      	lsrs	r3, r1
 8000cec:	431e      	orrs	r6, r3
 8000cee:	40cc      	lsrs	r4, r1
 8000cf0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	e750      	b.n	8000b9a <__udivmoddi4+0xa6>
 8000cf8:	f1c2 0320 	rsb	r3, r2, #32
 8000cfc:	fa20 f103 	lsr.w	r1, r0, r3
 8000d00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d04:	fa24 f303 	lsr.w	r3, r4, r3
 8000d08:	4094      	lsls	r4, r2
 8000d0a:	430c      	orrs	r4, r1
 8000d0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d10:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d1c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d20:	0c23      	lsrs	r3, r4, #16
 8000d22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d26:	fb00 f107 	mul.w	r1, r0, r7
 8000d2a:	4299      	cmp	r1, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x24c>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d36:	d22c      	bcs.n	8000d92 <__udivmoddi4+0x29e>
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	d92a      	bls.n	8000d92 <__udivmoddi4+0x29e>
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	4463      	add	r3, ip
 8000d40:	1a5b      	subs	r3, r3, r1
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d48:	fb08 3311 	mls	r3, r8, r1, r3
 8000d4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d50:	fb01 f307 	mul.w	r3, r1, r7
 8000d54:	42a3      	cmp	r3, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x276>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d60:	d213      	bcs.n	8000d8a <__udivmoddi4+0x296>
 8000d62:	42a3      	cmp	r3, r4
 8000d64:	d911      	bls.n	8000d8a <__udivmoddi4+0x296>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4464      	add	r4, ip
 8000d6a:	1ae4      	subs	r4, r4, r3
 8000d6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d70:	e739      	b.n	8000be6 <__udivmoddi4+0xf2>
 8000d72:	4604      	mov	r4, r0
 8000d74:	e6f0      	b.n	8000b58 <__udivmoddi4+0x64>
 8000d76:	4608      	mov	r0, r1
 8000d78:	e706      	b.n	8000b88 <__udivmoddi4+0x94>
 8000d7a:	45c8      	cmp	r8, r9
 8000d7c:	d2ae      	bcs.n	8000cdc <__udivmoddi4+0x1e8>
 8000d7e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d82:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d86:	3801      	subs	r0, #1
 8000d88:	e7a8      	b.n	8000cdc <__udivmoddi4+0x1e8>
 8000d8a:	4631      	mov	r1, r6
 8000d8c:	e7ed      	b.n	8000d6a <__udivmoddi4+0x276>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	e799      	b.n	8000cc6 <__udivmoddi4+0x1d2>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e7d4      	b.n	8000d40 <__udivmoddi4+0x24c>
 8000d96:	46d6      	mov	lr, sl
 8000d98:	e77f      	b.n	8000c9a <__udivmoddi4+0x1a6>
 8000d9a:	4463      	add	r3, ip
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	e74d      	b.n	8000c3c <__udivmoddi4+0x148>
 8000da0:	4606      	mov	r6, r0
 8000da2:	4623      	mov	r3, r4
 8000da4:	4608      	mov	r0, r1
 8000da6:	e70f      	b.n	8000bc8 <__udivmoddi4+0xd4>
 8000da8:	3e02      	subs	r6, #2
 8000daa:	4463      	add	r3, ip
 8000dac:	e730      	b.n	8000c10 <__udivmoddi4+0x11c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <MX_I2C3_Init>:
#include "I2C.h"

I2C_HandleTypeDef hi2c3;

void MX_I2C3_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	hi2c3.Instance = I2C3;
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <MX_I2C3_Init+0x50>)
 8000dba:	4a13      	ldr	r2, [pc, #76]	@ (8000e08 <MX_I2C3_Init+0x54>)
 8000dbc:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <MX_I2C3_Init+0x50>)
 8000dc0:	4a12      	ldr	r2, [pc, #72]	@ (8000e0c <MX_I2C3_Init+0x58>)
 8000dc2:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <MX_I2C3_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 128;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <MX_I2C3_Init+0x50>)
 8000dcc:	2280      	movs	r2, #128	@ 0x80
 8000dce:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <MX_I2C3_Init+0x50>)
 8000dd2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dd6:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <MX_I2C3_Init+0x50>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <MX_I2C3_Init+0x50>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de4:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <MX_I2C3_Init+0x50>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <MX_I2C3_Init+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	@ (8000e04 <MX_I2C3_Init+0x50>)
 8000df2:	f001 fad1 	bl	8002398 <HAL_I2C_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_I2C3_Init+0x4c>
    {
        Error_Handler();
 8000dfc:	f000 fe6c 	bl	8001ad8 <Error_Handler>
    }
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000064 	.word	0x20000064
 8000e08:	40005c00 	.word	0x40005c00
 8000e0c:	000186a0 	.word	0x000186a0

08000e10 <INA238_Init>:
#include "INA238.h"
HAL_StatusTypeDef INA238_Init(INA238_HandleTypeDef *hINA238,
		I2C_HandleTypeDef *hi2c, uint16_t addr, uint16_t average,
		uint16_t busConvTime, uint16_t shuntConvTime, uint16_t mode,
		float rShuntValue, float iMax){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6178      	str	r0, [r7, #20]
 8000e18:	6139      	str	r1, [r7, #16]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e22:	edc7 0a01 	vstr	s1, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	81fb      	strh	r3, [r7, #14]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	81bb      	strh	r3, [r7, #12]
    hINA238->hi2c = hi2c;
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	601a      	str	r2, [r3, #0]
    hINA238->addr = addr;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	89fa      	ldrh	r2, [r7, #14]
 8000e38:	809a      	strh	r2, [r3, #4]
    hINA238->average = average;
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	89ba      	ldrh	r2, [r7, #12]
 8000e3e:	80da      	strh	r2, [r3, #6]
    hINA238->busConvTime = busConvTime;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	8c3a      	ldrh	r2, [r7, #32]
 8000e44:	811a      	strh	r2, [r3, #8]
    hINA238->shuntConvTime = shuntConvTime;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000e4a:	815a      	strh	r2, [r3, #10]
    hINA238->mode = mode;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000e50:	819a      	strh	r2, [r3, #12]
    hINA238->rShuntValue = rShuntValue;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	611a      	str	r2, [r3, #16]
    hINA238->iMax = iMax;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	615a      	str	r2, [r3, #20]
    // Kalibrasyon değerinin hesaplanması
    hINA238->calibrationValue = (uint16_t)(0.00512 /
    		(hINA238->rShuntValue * (1 << hINA238->average)));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	ed93 7a04 	vldr	s14, [r3, #16]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	88db      	ldrh	r3, [r3, #6]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	4093      	lsls	r3, r2
 8000e6e:	ee07 3a90 	vmov	s15, r3
 8000e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e7a:	ee17 0a90 	vmov	r0, s15
 8000e7e:	f7ff fb0f 	bl	80004a0 <__aeabi_f2d>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
    hINA238->calibrationValue = (uint16_t)(0.00512 /
 8000e86:	a10e      	add	r1, pc, #56	@ (adr r1, 8000ec0 <INA238_Init+0xb0>)
 8000e88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e8c:	f7ff fc8a 	bl	80007a4 <__aeabi_ddiv>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4610      	mov	r0, r2
 8000e96:	4619      	mov	r1, r3
 8000e98:	f7ff fdf4 	bl	8000a84 <__aeabi_d2uiz>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	831a      	strh	r2, [r3, #24]
    if (INA238_Reset(hINA238) != HAL_OK)
 8000ea4:	6978      	ldr	r0, [r7, #20]
 8000ea6:	f000 f80f 	bl	8000ec8 <INA238_Reset>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <INA238_Init+0xa4>
    {
        return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e000      	b.n	8000eb6 <INA238_Init+0xa6>
    }

    return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	88e368f1 	.word	0x88e368f1
 8000ec4:	3f74f8b5 	.word	0x3f74f8b5

08000ec8 <INA238_Reset>:

HAL_StatusTypeDef INA238_Reset(INA238_HandleTypeDef *hINA238)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af04      	add	r7, sp, #16
 8000ece:	6078      	str	r0, [r7, #4]
    uint16_t reset = INA238_RESET;
 8000ed0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ed4:	81fb      	strh	r3, [r7, #14]
    uint8_t data[2];
    data[0] = reset >> 8;
 8000ed6:	89fb      	ldrh	r3, [r7, #14]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	733b      	strb	r3, [r7, #12]
    data[1] = reset & 0xff;
 8000ee0:	89fb      	ldrh	r3, [r7, #14]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Mem_Write(hINA238->hi2c, hINA238->addr, CONFIG_REG, I2C_MEMADD_SIZE_16BIT, data, 2, 1000) != HAL_OK)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6818      	ldr	r0, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	8899      	ldrh	r1, [r3, #4]
 8000eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2310      	movs	r3, #16
 8000f00:	2200      	movs	r2, #0
 8000f02:	f001 fb8d 	bl	8002620 <HAL_I2C_Mem_Write>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <INA238_Reset+0x48>
    {
        return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e000      	b.n	8000f12 <INA238_Reset+0x4a>
    }
    return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <INA238_Config>:
HAL_StatusTypeDef INA238_Config(INA238_HandleTypeDef *hINA238)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b088      	sub	sp, #32
 8000f1e:	af04      	add	r7, sp, #16
 8000f20:	6078      	str	r0, [r7, #4]
    uint16_t config = (hINA238->average << 9) | (hINA238->busConvTime << 6) | (hINA238->shuntConvTime << 3) | hINA238->mode;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	88db      	ldrh	r3, [r3, #6]
 8000f26:	025b      	lsls	r3, r3, #9
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	891b      	ldrh	r3, [r3, #8]
 8000f2e:	019b      	lsls	r3, r3, #6
 8000f30:	b21b      	sxth	r3, r3
 8000f32:	4313      	orrs	r3, r2
 8000f34:	b21a      	sxth	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	895b      	ldrh	r3, [r3, #10]
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b21a      	sxth	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	899b      	ldrh	r3, [r3, #12]
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	b21b      	sxth	r3, r3
 8000f4c:	81fb      	strh	r3, [r7, #14]
    uint8_t data[2];

    data[0] = config >> 8;
 8000f4e:	89fb      	ldrh	r3, [r7, #14]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	733b      	strb	r3, [r7, #12]
    data[1] = config & 0xff;
 8000f58:	89fb      	ldrh	r3, [r7, #14]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	737b      	strb	r3, [r7, #13]

    // Konfigürasyon kaydını yazma
    if (HAL_I2C_Mem_Write(hINA238->hi2c, hINA238->addr, CONFIG_REG, I2C_MEMADD_SIZE_16BIT, data, 2, 1000) != HAL_OK)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	8899      	ldrh	r1, [r3, #4]
 8000f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2310      	movs	r3, #16
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f001 fb51 	bl	8002620 <HAL_I2C_Mem_Write>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <INA238_Config+0x6e>
    {
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e01f      	b.n	8000fc8 <INA238_Config+0xae>
    }

    // Kalibrasyon kaydını yazma
    data[0] = hINA238->calibrationValue >> 8;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	8b1b      	ldrh	r3, [r3, #24]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	733b      	strb	r3, [r7, #12]
    data[1] = hINA238->calibrationValue & 0xff;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	8b1b      	ldrh	r3, [r3, #24]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	737b      	strb	r3, [r7, #13]

    if (HAL_I2C_Mem_Write(hINA238->hi2c, hINA238->addr, CALIBRATION_REG, I2C_MEMADD_SIZE_16BIT, data, 2, 1000) != HAL_OK)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	8899      	ldrh	r1, [r3, #4]
 8000fa4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2302      	movs	r3, #2
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	2205      	movs	r2, #5
 8000fb8:	f001 fb32 	bl	8002620 <HAL_I2C_Mem_Write>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <INA238_Config+0xac>
    {
        return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <INA238_Config+0xae>
    }
    return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <INA238_ReadCurrent>:
    *voltage = (float)shuntVoltageRaw * hINA238->shuntVoltageLSB;
    return HAL_OK;
}

HAL_StatusTypeDef INA238_ReadCurrent(INA238_HandleTypeDef *hINA238, float *current)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af04      	add	r7, sp, #16
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
    uint16_t currentRaw;
    uint8_t data[2];
    // Akım kaydını okuma
    if (HAL_I2C_Mem_Read(hINA238->hi2c, hINA238->addr,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	8899      	ldrh	r1, [r3, #4]
 8000fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	2302      	movs	r3, #2
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	f001 fc0d 	bl	8002814 <HAL_I2C_Mem_Read>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <INA238_ReadCurrent+0x34>
    		CURRENT_REG, I2C_MEMADD_SIZE_16BIT, data, 2, 1000) != HAL_OK)
    {
        return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e015      	b.n	8001030 <INA238_ReadCurrent+0x60>
    }
    currentRaw = (data[0] << 8) | data[1];
 8001004:	7b3b      	ldrb	r3, [r7, #12]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
 800100a:	7b7b      	ldrb	r3, [r7, #13]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21b      	sxth	r3, r3
 8001012:	81fb      	strh	r3, [r7, #14]
    // Amper cinsinden akımı hesaplama
    *current = (float)currentRaw * hINA238->currentLSB;
 8001014:	89fb      	ldrh	r3, [r7, #14]
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	edd3 7a08 	vldr	s15, [r3, #32]
 8001024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	edc3 7a00 	vstr	s15, [r3]

    return HAL_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <INA238_ReadBusVoltage>:
    *power = (float)powerRaw * hINA238->powerLSB;

    return HAL_OK;
}
HAL_StatusTypeDef INA238_ReadBusVoltage(INA238_HandleTypeDef *hINA238, float *voltage)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af04      	add	r7, sp, #16
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
    uint16_t busVoltageRaw;
    uint8_t data[2];
    // Bus voltaj kaydını okuma
    if (HAL_I2C_Mem_Read(hINA238->hi2c, hINA238->addr,
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	8899      	ldrh	r1, [r3, #4]
 800104a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104e:	9302      	str	r3, [sp, #8]
 8001050:	2302      	movs	r3, #2
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2310      	movs	r3, #16
 800105c:	2202      	movs	r2, #2
 800105e:	f001 fbd9 	bl	8002814 <HAL_I2C_Mem_Read>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <INA238_ReadBusVoltage+0x34>
    		BUS_VOLTAGE_REG, I2C_MEMADD_SIZE_16BIT, data, 2, 1000) != HAL_OK)
    {
        return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e015      	b.n	8001098 <INA238_ReadBusVoltage+0x60>
    }

    busVoltageRaw = (data[0] << 8) | data[1];
 800106c:	7b3b      	ldrb	r3, [r7, #12]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21a      	sxth	r2, r3
 8001072:	7b7b      	ldrb	r3, [r7, #13]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21b      	sxth	r3, r3
 800107a:	81fb      	strh	r3, [r7, #14]
    // Volt cinsinden bus voltajını hesaplama
    *voltage = (float)busVoltageRaw * hINA238->busVoltageLSB;
 800107c:	89fb      	ldrh	r3, [r7, #14]
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800108c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	edc3 7a00 	vstr	s15, [r3]

    return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <PID_Init>:
#include "PID.h"

void PID_Init(PID_TypeDef *uPID) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    uPID->OutputSum = *uPID->MyOutput;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    uPID->LastInput = *uPID->MyInput;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    if (uPID->OutputSum > uPID->OutMax) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80010d0:	f7ff fcce 	bl	8000a70 <__aeabi_dcmpgt>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <PID_Init+0x48>
        uPID->OutputSum = uPID->OutMax;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    } else if (uPID->OutputSum < uPID->OutMin) {
        uPID->OutputSum = uPID->OutMin;
    }
}
 80010e6:	e011      	b.n	800110c <PID_Init+0x6c>
    } else if (uPID->OutputSum < uPID->OutMin) {
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80010f4:	f7ff fc9e 	bl	8000a34 <__aeabi_dcmplt>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d100      	bne.n	8001100 <PID_Init+0x60>
}
 80010fe:	e005      	b.n	800110c <PID_Init+0x6c>
        uPID->OutputSum = uPID->OutMin;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	0000      	movs	r0, r0
	...

08001118 <PID>:


void PID(PID_TypeDef *uPID, double *Input, double *Output,
		double *Setpoint, double Kp, double Ki, double Kd,
		PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	@ 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6278      	str	r0, [r7, #36]	@ 0x24
 8001120:	6239      	str	r1, [r7, #32]
 8001122:	61fa      	str	r2, [r7, #28]
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	ed87 0b04 	vstr	d0, [r7, #16]
 800112a:	ed87 1b02 	vstr	d1, [r7, #8]
 800112e:	ed87 2b00 	vstr	d2, [r7]
    uPID->MyOutput = Output;
 8001132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	645a      	str	r2, [r3, #68]	@ 0x44
    uPID->MyInput = Input;
 8001138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113a:	6a3a      	ldr	r2, [r7, #32]
 800113c:	641a      	str	r2, [r3, #64]	@ 0x40
    uPID->MySetpoint = Setpoint;
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	649a      	str	r2, [r3, #72]	@ 0x48
    uPID->InAuto = _PID_MODE_AUTOMATIC;
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	2201      	movs	r2, #1
 8001148:	705a      	strb	r2, [r3, #1]
    PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800114a:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 80011a0 <PID+0x88>
 800114e:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80011a8 <PID+0x90>
 8001152:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001154:	f000 f92e 	bl	80013b4 <PID_SetOutputLimits>
    uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF;
 8001158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115a:	2264      	movs	r2, #100	@ 0x64
 800115c:	609a      	str	r2, [r3, #8]
    PID_SetControllerDirection(uPID, ControllerDirection);
 800115e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001162:	4619      	mov	r1, r3
 8001164:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001166:	f000 fa1d 	bl	80015a4 <PID_SetControllerDirection>
    PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800116a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800116e:	4619      	mov	r1, r3
 8001170:	ed97 2b00 	vldr	d2, [r7]
 8001174:	ed97 1b02 	vldr	d1, [r7, #8]
 8001178:	ed97 0b04 	vldr	d0, [r7, #16]
 800117c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800117e:	f000 f987 	bl	8001490 <PID_SetTunings2>
    uPID->LastTime = HAL_GetTick() - uPID->SampleTime;
 8001182:	f000 fe6f 	bl	8001e64 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	1ad2      	subs	r2, r2, r3
 800118e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001190:	605a      	str	r2, [r3, #4]
}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	@ 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	f3af 8000 	nop.w
 80011a0:	00000000 	.word	0x00000000
 80011a4:	406fe000 	.word	0x406fe000
	...

080011b0 <PID_Compute>:
uint8_t PID_Compute(PID_TypeDef *uPID) {
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b08c      	sub	sp, #48	@ 0x30
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 80011b8:	f000 fe54 	bl	8001e64 <HAL_GetTick>
 80011bc:	6278      	str	r0, [r7, #36]	@ 0x24
    uint32_t timeChange = (now - uPID->LastTime);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	623b      	str	r3, [r7, #32]
    if (timeChange >= uPID->SampleTime) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	6a3a      	ldr	r2, [r7, #32]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	f0c0 80cd 	bcc.w	800136e <PID_Compute+0x1be>
        double input = *uPID->MyInput;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
        double error = *uPID->MySetpoint - input;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011ec:	f7fe fff8 	bl	80001e0 <__aeabi_dsub>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
        double dInput = (input - uPID->LastInput);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80011fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001202:	f7fe ffed 	bl	80001e0 <__aeabi_dsub>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	e9c7 2302 	strd	r2, r3, [r7, #8]
        double output;
        uPID->OutputSum += (uPID->Ki * error);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800121a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800121e:	f7ff f997 	bl	8000550 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4620      	mov	r0, r4
 8001228:	4629      	mov	r1, r5
 800122a:	f7fe ffdb 	bl	80001e4 <__adddf3>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        if (!uPID->POnE) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d114      	bne.n	800126a <PID_Compute+0xba>
            uPID->OutputSum -= uPID->Kp * dInput;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800124c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001250:	f7ff f97e 	bl	8000550 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4620      	mov	r0, r4
 800125a:	4629      	mov	r1, r5
 800125c:	f7fe ffc0 	bl	80001e0 <__aeabi_dsub>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        }
        if (uPID->OutputSum > uPID->OutMax) {
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001276:	f7ff fbfb 	bl	8000a70 <__aeabi_dcmpgt>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d006      	beq.n	800128e <PID_Compute+0xde>
            uPID->OutputSum = uPID->OutMax;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800128c:	e010      	b.n	80012b0 <PID_Compute+0x100>
        } else if (uPID->OutputSum < uPID->OutMin) {
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800129a:	f7ff fbcb 	bl	8000a34 <__aeabi_dcmplt>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d005      	beq.n	80012b0 <PID_Compute+0x100>
            uPID->OutputSum = uPID->OutMin;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        }
        if (uPID->POnE) {
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00b      	beq.n	80012d0 <PID_Compute+0x120>
            output = uPID->Kp * error;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80012be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012c2:	f7ff f945 	bl	8000550 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80012ce:	e005      	b.n	80012dc <PID_Compute+0x12c>
        } else {
            output = 0;
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        }
        output += uPID->OutputSum - uPID->Kd * dInput;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80012e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012ec:	f7ff f930 	bl	8000550 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4620      	mov	r0, r4
 80012f6:	4629      	mov	r1, r5
 80012f8:	f7fe ff72 	bl	80001e0 <__aeabi_dsub>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001304:	f7fe ff6e 	bl	80001e4 <__adddf3>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        if (output > uPID->OutMax) {
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001316:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800131a:	f7ff fba9 	bl	8000a70 <__aeabi_dcmpgt>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d005      	beq.n	8001330 <PID_Compute+0x180>
            output = uPID->OutMax;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800132a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800132e:	e00e      	b.n	800134e <PID_Compute+0x19e>
        } else if (output < uPID->OutMin) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001336:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800133a:	f7ff fb7b 	bl	8000a34 <__aeabi_dcmplt>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d004      	beq.n	800134e <PID_Compute+0x19e>
            output = uPID->OutMin;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800134a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        }
        *uPID->MyOutput = output;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001352:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001356:	e9c1 2300 	strd	r2, r3, [r1]
        uPID->LastInput = input;
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001360:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        uPID->LastTime = now;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001368:	605a      	str	r2, [r3, #4]
        return 1;
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <PID_Compute+0x1c0>
    } else {
        return 0;
 800136e:	2300      	movs	r3, #0
    }
}
 8001370:	4618      	mov	r0, r3
 8001372:	3730      	adds	r7, #48	@ 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}

08001378 <PID_SetMode>:

void PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
    uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	2b01      	cmp	r3, #1
 8001388:	bf0c      	ite	eq
 800138a:	2301      	moveq	r3, #1
 800138c:	2300      	movne	r3, #0
 800138e:	b2db      	uxtb	r3, r3
 8001390:	73fb      	strb	r3, [r7, #15]

    if (newAuto && !uPID->InAuto) {
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <PID_SetMode+0x2e>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	785b      	ldrb	r3, [r3, #1]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <PID_SetMode+0x2e>
        PID_Init(uPID);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff fe7d 	bl	80010a0 <PID_Init>
    }

    uPID->InAuto = newAuto;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	705a      	strb	r2, [r3, #1]
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <PID_SetOutputLimits>:

void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6178      	str	r0, [r7, #20]
 80013bc:	ed87 0b02 	vstr	d0, [r7, #8]
 80013c0:	ed87 1b00 	vstr	d1, [r7]
    if (Min >= Max) return;
 80013c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013cc:	f7ff fb46 	bl	8000a5c <__aeabi_dcmpge>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d158      	bne.n	8001488 <PID_SetOutputLimits+0xd4>

    uPID->OutMin = Min;
 80013d6:	6979      	ldr	r1, [r7, #20]
 80013d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013dc:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    uPID->OutMax = Max;
 80013e0:	6979      	ldr	r1, [r7, #20]
 80013e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013e6:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

    if (uPID->InAuto) {
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	785b      	ldrb	r3, [r3, #1]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d04b      	beq.n	800148a <PID_SetOutputLimits+0xd6>
        if (*uPID->MyOutput > uPID->OutMax) {
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001400:	f7ff fb36 	bl	8000a70 <__aeabi_dcmpgt>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <PID_SetOutputLimits+0x66>
            *uPID->MyOutput = uPID->OutMax;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001414:	e9c1 2300 	strd	r2, r3, [r1]
 8001418:	e012      	b.n	8001440 <PID_SetOutputLimits+0x8c>
        } else if (*uPID->MyOutput < uPID->OutMin) {
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001428:	f7ff fb04 	bl	8000a34 <__aeabi_dcmplt>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <PID_SetOutputLimits+0x8c>
            *uPID->MyOutput = uPID->OutMin;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800143c:	e9c1 2300 	strd	r2, r3, [r1]
        }

        if (uPID->OutputSum > uPID->OutMax) {
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800144c:	f7ff fb10 	bl	8000a70 <__aeabi_dcmpgt>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d006      	beq.n	8001464 <PID_SetOutputLimits+0xb0>
            uPID->OutputSum = uPID->OutMax;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800145c:	6979      	ldr	r1, [r7, #20]
 800145e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001462:	e012      	b.n	800148a <PID_SetOutputLimits+0xd6>
        } else if (uPID->OutputSum < uPID->OutMin) {
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001470:	f7ff fae0 	bl	8000a34 <__aeabi_dcmplt>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d007      	beq.n	800148a <PID_SetOutputLimits+0xd6>
            uPID->OutputSum = uPID->OutMin;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001480:	6979      	ldr	r1, [r7, #20]
 8001482:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001486:	e000      	b.n	800148a <PID_SetOutputLimits+0xd6>
    if (Min >= Max) return;
 8001488:	bf00      	nop
        }
    }
}
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd) {
    PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}

void PID_SetTunings2(PID_TypeDef *uPID, double Kp,
		double Ki, double Kd, PIDPON_TypeDef POn) {
 8001490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001494:	b08a      	sub	sp, #40	@ 0x28
 8001496:	af00      	add	r7, sp, #0
 8001498:	61f8      	str	r0, [r7, #28]
 800149a:	ed87 0b04 	vstr	d0, [r7, #16]
 800149e:	ed87 1b02 	vstr	d1, [r7, #8]
 80014a2:	ed87 2b00 	vstr	d2, [r7]
 80014a6:	460b      	mov	r3, r1
 80014a8:	76fb      	strb	r3, [r7, #27]
    if (Kp < 0 || Ki < 0 || Kd < 0) return;
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014b6:	f7ff fabd 	bl	8000a34 <__aeabi_dcmplt>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d16a      	bne.n	8001596 <PID_SetTunings2+0x106>
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014cc:	f7ff fab2 	bl	8000a34 <__aeabi_dcmplt>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d15f      	bne.n	8001596 <PID_SetTunings2+0x106>
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014e2:	f7ff faa7 	bl	8000a34 <__aeabi_dcmplt>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d154      	bne.n	8001596 <PID_SetTunings2+0x106>

    uPID->POn = POn;
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	7efa      	ldrb	r2, [r7, #27]
 80014f0:	709a      	strb	r2, [r3, #2]
    uPID->POnE = (POn == _PID_P_ON_E);
 80014f2:	7efb      	ldrb	r3, [r7, #27]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	bf0c      	ite	eq
 80014f8:	2301      	moveq	r3, #1
 80014fa:	2300      	movne	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	701a      	strb	r2, [r3, #0]

    double SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	4618      	mov	r0, r3
 800150a:	f7fe ffa7 	bl	800045c <__aeabi_ui2d>
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	4b23      	ldr	r3, [pc, #140]	@ (80015a0 <PID_SetTunings2+0x110>)
 8001514:	f7ff f946 	bl	80007a4 <__aeabi_ddiv>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	e9c7 2308 	strd	r2, r3, [r7, #32]

    uPID->Kp = Kp;
 8001520:	69f9      	ldr	r1, [r7, #28]
 8001522:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001526:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    uPID->Ki = Ki * SampleTimeInSec;
 800152a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800152e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001532:	f7ff f80d 	bl	8000550 <__aeabi_dmul>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	69f9      	ldr	r1, [r7, #28]
 800153c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    uPID->Kd = Kd / SampleTimeInSec;
 8001540:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001544:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001548:	f7ff f92c 	bl	80007a4 <__aeabi_ddiv>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	69f9      	ldr	r1, [r7, #28]
 8001552:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    if (uPID->ControllerDirection == _PID_CD_REVERSE) {
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	78db      	ldrb	r3, [r3, #3]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d11c      	bne.n	8001598 <PID_SetTunings2+0x108>
        uPID->Kp = -uPID->Kp;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001564:	4692      	mov	sl, r2
 8001566:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	e9c3 ab0a 	strd	sl, fp, [r3, #40]	@ 0x28
        uPID->Ki = -uPID->Ki;
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001576:	4690      	mov	r8, r2
 8001578:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
        uPID->Kd = -uPID->Kd;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001588:	4614      	mov	r4, r2
 800158a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	e9c3 450e 	strd	r4, r5, [r3, #56]	@ 0x38
 8001594:	e000      	b.n	8001598 <PID_SetTunings2+0x108>
    if (Kp < 0 || Ki < 0 || Kd < 0) return;
 8001596:	bf00      	nop
    }
}
 8001598:	3728      	adds	r7, #40	@ 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015a0:	408f4000 	.word	0x408f4000

080015a4 <PID_SetControllerDirection>:

void PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction) {
 80015a4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	70f9      	strb	r1, [r7, #3]
    if (uPID->InAuto && Direction != uPID->ControllerDirection) {
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	7849      	ldrb	r1, [r1, #1]
 80015b4:	2900      	cmp	r1, #0
 80015b6:	d01f      	beq.n	80015f8 <PID_SetControllerDirection+0x54>
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	78c9      	ldrb	r1, [r1, #3]
 80015bc:	78f8      	ldrb	r0, [r7, #3]
 80015be:	4288      	cmp	r0, r1
 80015c0:	d01a      	beq.n	80015f8 <PID_SetControllerDirection+0x54>
        uPID->Kp = -uPID->Kp;
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	@ 0x28
 80015c8:	4680      	mov	r8, r0
 80015ca:	f081 4900 	eor.w	r9, r1, #2147483648	@ 0x80000000
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	e9c1 890a 	strd	r8, r9, [r1, #40]	@ 0x28
        uPID->Ki = -uPID->Ki;
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	e9d1 010c 	ldrd	r0, r1, [r1, #48]	@ 0x30
 80015da:	4604      	mov	r4, r0
 80015dc:	f081 4500 	eor.w	r5, r1, #2147483648	@ 0x80000000
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	e9c1 450c 	strd	r4, r5, [r1, #48]	@ 0x30
        uPID->Kd = -uPID->Kd;
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 80015ec:	4602      	mov	r2, r0
 80015ee:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    }

    uPID->ControllerDirection = Direction;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	78fa      	ldrb	r2, [r7, #3]
 80015fc:	70da      	strb	r2, [r3, #3]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001608:	4770      	bx	lr
	...

0800160c <pwm_init>:
#include "PWM.h"
static void pwm_pin_configure();
void pwm_init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
    pwm_pin_configure();
 8001610:	f000 f846 	bl	80016a0 <pwm_pin_configure>
    TIM3->PSC = 0;  // Set prescaler to 1 to have the timer clock at 16 MHz (no division)
 8001614:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <pwm_init+0x38>)
 8001616:	2200      	movs	r2, #0
 8001618:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 239;// 16 MHz / (15 µs * 16 MHz) = 240, so ARR = 240 - 1 = 239
 800161a:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <pwm_init+0x38>)
 800161c:	22ef      	movs	r2, #239	@ 0xef
 800161e:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM3->CCR2 = 0; // Start with duty cycle 0
 8001620:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <pwm_init+0x38>)
 8001622:	2200      	movs	r2, #0
 8001624:	639a      	str	r2, [r3, #56]	@ 0x38
    // Configure Channel 2 for PWM mode 1 and enable preload
    TIM3->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2PE;
 8001626:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <pwm_init+0x38>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	4a06      	ldr	r2, [pc, #24]	@ (8001644 <pwm_init+0x38>)
 800162c:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 8001630:	6193      	str	r3, [r2, #24]
    // Enable output for Channel 2
        TIM3->CCER |= TIM_CCER_CC2E;
 8001632:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <pwm_init+0x38>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a03      	ldr	r2, [pc, #12]	@ (8001644 <pwm_init+0x38>)
 8001638:	f043 0310 	orr.w	r3, r3, #16
 800163c:	6213      	str	r3, [r2, #32]
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40000400 	.word	0x40000400

08001648 <pwm_enable>:
void pwm_enable(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
    // Enable Timer
    TIM3->CR1 |= TIM_CR1_CEN;
 800164c:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <pwm_enable+0x28>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a07      	ldr	r2, [pc, #28]	@ (8001670 <pwm_enable+0x28>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6013      	str	r3, [r2, #0]
    TIM3->EGR |= TIM_EGR_UG;
 8001658:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <pwm_enable+0x28>)
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <pwm_enable+0x28>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6153      	str	r3, [r2, #20]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40000400 	.word	0x40000400

08001674 <pwm_set_duty_cycle>:
{
    // Disable Timer
    TIM3->CR1 &= ~(TIM_CR1_CEN);
}
void pwm_set_duty_cycle(uint32_t duty, Channels_e channel)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	70fb      	strb	r3, [r7, #3]
    switch (channel) {
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d103      	bne.n	800168e <pwm_set_duty_cycle+0x1a>
        case CHANNEL2:
            TIM3->CCR2 = duty;
 8001686:	4a05      	ldr	r2, [pc, #20]	@ (800169c <pwm_set_duty_cycle+0x28>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6393      	str	r3, [r2, #56]	@ 0x38
            break;
 800168c:	bf00      	nop
    }
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40000400 	.word	0x40000400

080016a0 <pwm_pin_configure>:
static void pwm_pin_configure()
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	    __HAL_RCC_TIM3_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <pwm_pin_configure+0x68>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	4a16      	ldr	r2, [pc, #88]	@ (8001708 <pwm_pin_configure+0x68>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b6:	4b14      	ldr	r3, [pc, #80]	@ (8001708 <pwm_pin_configure+0x68>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
	    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <pwm_pin_configure+0x68>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001708 <pwm_pin_configure+0x68>)
 80016cc:	f043 0304 	orr.w	r3, r3, #4
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001708 <pwm_pin_configure+0x68>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
	    // PC7 - TIMER3 - CH1
	    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016de:	2380      	movs	r3, #128	@ 0x80
 80016e0:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ea:	2302      	movs	r3, #2
 80016ec:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	4619      	mov	r1, r3
 80016f8:	4804      	ldr	r0, [pc, #16]	@ (800170c <pwm_pin_configure+0x6c>)
 80016fa:	f000 fcc9 	bl	8002090 <HAL_GPIO_Init>
}
 80016fe:	bf00      	nop
 8001700:	3720      	adds	r7, #32
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800
 800170c:	40020800 	.word	0x40020800

08001710 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM3_Init(void);

int main(void)
{
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af04      	add	r7, sp, #16
	HAL_Init();
 8001716:	f000 fb3f 	bl	8001d98 <HAL_Init>
	SystemClock_Config();
 800171a:	f000 f8fb 	bl	8001914 <SystemClock_Config>
	MX_GPIO_Init();
 800171e:	f000 f9b3 	bl	8001a88 <MX_GPIO_Init>
	MX_I2C3_Init();
 8001722:	f7ff fb47 	bl	8000db4 <MX_I2C3_Init>
	MX_TIM3_Init();
 8001726:	f000 f955 	bl	80019d4 <MX_TIM3_Init>
	pwm_init();
 800172a:	f7ff ff6f 	bl	800160c <pwm_init>
	pwm_enable();
 800172e:	f7ff ff8b 	bl	8001648 <pwm_enable>
	INA238_Init(&hINA238, &hi2c3, addr, average, busConvTime, shuntConvTime, mode, rShuntValue, iMax);
 8001732:	4b62      	ldr	r3, [pc, #392]	@ (80018bc <main+0x1ac>)
 8001734:	8818      	ldrh	r0, [r3, #0]
 8001736:	4b62      	ldr	r3, [pc, #392]	@ (80018c0 <main+0x1b0>)
 8001738:	881c      	ldrh	r4, [r3, #0]
 800173a:	4b62      	ldr	r3, [pc, #392]	@ (80018c4 <main+0x1b4>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	4a62      	ldr	r2, [pc, #392]	@ (80018c8 <main+0x1b8>)
 8001740:	8812      	ldrh	r2, [r2, #0]
 8001742:	4962      	ldr	r1, [pc, #392]	@ (80018cc <main+0x1bc>)
 8001744:	8809      	ldrh	r1, [r1, #0]
 8001746:	4d62      	ldr	r5, [pc, #392]	@ (80018d0 <main+0x1c0>)
 8001748:	edd5 7a00 	vldr	s15, [r5]
 800174c:	4d61      	ldr	r5, [pc, #388]	@ (80018d4 <main+0x1c4>)
 800174e:	ed95 7a00 	vldr	s14, [r5]
 8001752:	9102      	str	r1, [sp, #8]
 8001754:	9201      	str	r2, [sp, #4]
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	eef0 0a47 	vmov.f32	s1, s14
 800175c:	eeb0 0a67 	vmov.f32	s0, s15
 8001760:	4623      	mov	r3, r4
 8001762:	4602      	mov	r2, r0
 8001764:	495c      	ldr	r1, [pc, #368]	@ (80018d8 <main+0x1c8>)
 8001766:	485d      	ldr	r0, [pc, #372]	@ (80018dc <main+0x1cc>)
 8001768:	f7ff fb52 	bl	8000e10 <INA238_Init>
	INA238_Config(&hINA238);
 800176c:	485b      	ldr	r0, [pc, #364]	@ (80018dc <main+0x1cc>)
 800176e:	f7ff fbd4 	bl	8000f1a <INA238_Config>
	PID(&pidVoltage, &inputVoltage, &outputVoltage, &setpointVoltage, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8001772:	4b5b      	ldr	r3, [pc, #364]	@ (80018e0 <main+0x1d0>)
 8001774:	ed93 7b00 	vldr	d7, [r3]
 8001778:	4b5a      	ldr	r3, [pc, #360]	@ (80018e4 <main+0x1d4>)
 800177a:	ed93 6b00 	vldr	d6, [r3]
 800177e:	4b5a      	ldr	r3, [pc, #360]	@ (80018e8 <main+0x1d8>)
 8001780:	ed93 5b00 	vldr	d5, [r3]
 8001784:	2300      	movs	r3, #0
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	2301      	movs	r3, #1
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	eeb0 2a45 	vmov.f32	s4, s10
 8001790:	eef0 2a65 	vmov.f32	s5, s11
 8001794:	eeb0 1a46 	vmov.f32	s2, s12
 8001798:	eef0 1a66 	vmov.f32	s3, s13
 800179c:	eeb0 0a47 	vmov.f32	s0, s14
 80017a0:	eef0 0a67 	vmov.f32	s1, s15
 80017a4:	4b51      	ldr	r3, [pc, #324]	@ (80018ec <main+0x1dc>)
 80017a6:	4a52      	ldr	r2, [pc, #328]	@ (80018f0 <main+0x1e0>)
 80017a8:	4952      	ldr	r1, [pc, #328]	@ (80018f4 <main+0x1e4>)
 80017aa:	4853      	ldr	r0, [pc, #332]	@ (80018f8 <main+0x1e8>)
 80017ac:	f7ff fcb4 	bl	8001118 <PID>
	PID(&pidCurrent, &inputCurrent, &outputCurrent, &setpointCurrent, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 80017b0:	4b4b      	ldr	r3, [pc, #300]	@ (80018e0 <main+0x1d0>)
 80017b2:	ed93 7b00 	vldr	d7, [r3]
 80017b6:	4b4b      	ldr	r3, [pc, #300]	@ (80018e4 <main+0x1d4>)
 80017b8:	ed93 6b00 	vldr	d6, [r3]
 80017bc:	4b4a      	ldr	r3, [pc, #296]	@ (80018e8 <main+0x1d8>)
 80017be:	ed93 5b00 	vldr	d5, [r3]
 80017c2:	2300      	movs	r3, #0
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	2301      	movs	r3, #1
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	eeb0 2a45 	vmov.f32	s4, s10
 80017ce:	eef0 2a65 	vmov.f32	s5, s11
 80017d2:	eeb0 1a46 	vmov.f32	s2, s12
 80017d6:	eef0 1a66 	vmov.f32	s3, s13
 80017da:	eeb0 0a47 	vmov.f32	s0, s14
 80017de:	eef0 0a67 	vmov.f32	s1, s15
 80017e2:	4b46      	ldr	r3, [pc, #280]	@ (80018fc <main+0x1ec>)
 80017e4:	4a46      	ldr	r2, [pc, #280]	@ (8001900 <main+0x1f0>)
 80017e6:	4947      	ldr	r1, [pc, #284]	@ (8001904 <main+0x1f4>)
 80017e8:	4847      	ldr	r0, [pc, #284]	@ (8001908 <main+0x1f8>)
 80017ea:	f7ff fc95 	bl	8001118 <PID>
	PID_SetMode(&pidVoltage, _PID_MODE_AUTOMATIC);
 80017ee:	2101      	movs	r1, #1
 80017f0:	4841      	ldr	r0, [pc, #260]	@ (80018f8 <main+0x1e8>)
 80017f2:	f7ff fdc1 	bl	8001378 <PID_SetMode>
	PID_SetMode(&pidCurrent, _PID_MODE_AUTOMATIC);
 80017f6:	2101      	movs	r1, #1
 80017f8:	4843      	ldr	r0, [pc, #268]	@ (8001908 <main+0x1f8>)
 80017fa:	f7ff fdbd 	bl	8001378 <PID_SetMode>
  while (1)
  {
	  	  INA238_ReadBusVoltage(&hINA238, &inputVoltage);
 80017fe:	493d      	ldr	r1, [pc, #244]	@ (80018f4 <main+0x1e4>)
 8001800:	4836      	ldr	r0, [pc, #216]	@ (80018dc <main+0x1cc>)
 8001802:	f7ff fc19 	bl	8001038 <INA238_ReadBusVoltage>
	  	  HAL_Delay(500);
 8001806:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800180a:	f000 fb37 	bl	8001e7c <HAL_Delay>
	  	  INA238_ReadCurrent(&hINA238, &inputCurrent);
 800180e:	493d      	ldr	r1, [pc, #244]	@ (8001904 <main+0x1f4>)
 8001810:	4832      	ldr	r0, [pc, #200]	@ (80018dc <main+0x1cc>)
 8001812:	f7ff fbdd 	bl	8000fd0 <INA238_ReadCurrent>
	  	  HAL_Delay(500);
 8001816:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800181a:	f000 fb2f 	bl	8001e7c <HAL_Delay>
	  	  PID_Compute(&pidVoltage);
 800181e:	4836      	ldr	r0, [pc, #216]	@ (80018f8 <main+0x1e8>)
 8001820:	f7ff fcc6 	bl	80011b0 <PID_Compute>
	  	  if (inputVoltage >= 14.0 || inputCurrent >= 2.5)
 8001824:	4b33      	ldr	r3, [pc, #204]	@ (80018f4 <main+0x1e4>)
 8001826:	e9d3 0100 	ldrd	r0, r1, [r3]
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	4b37      	ldr	r3, [pc, #220]	@ (800190c <main+0x1fc>)
 8001830:	f7ff f914 	bl	8000a5c <__aeabi_dcmpge>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10a      	bne.n	8001850 <main+0x140>
 800183a:	4b32      	ldr	r3, [pc, #200]	@ (8001904 <main+0x1f4>)
 800183c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	4b32      	ldr	r3, [pc, #200]	@ (8001910 <main+0x200>)
 8001846:	f7ff f909 	bl	8000a5c <__aeabi_dcmpge>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00c      	beq.n	800186a <main+0x15a>
	        {
	          pwm_set_duty_cycle(0, CHANNEL2);
 8001850:	2100      	movs	r1, #0
 8001852:	2000      	movs	r0, #0
 8001854:	f7ff ff0e 	bl	8001674 <pwm_set_duty_cycle>
	          HAL_Delay(1000);
 8001858:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800185c:	f000 fb0e 	bl	8001e7c <HAL_Delay>
	          pwm_set_duty_cycle(50, CHANNEL2);
 8001860:	2100      	movs	r1, #0
 8001862:	2032      	movs	r0, #50	@ 0x32
 8001864:	f7ff ff06 	bl	8001674 <pwm_set_duty_cycle>
 8001868:	e023      	b.n	80018b2 <main+0x1a2>
	        }
	        else
	        {
	          if (inputVoltage < setpointVoltage)
 800186a:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <main+0x1e4>)
 800186c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001870:	4b1e      	ldr	r3, [pc, #120]	@ (80018ec <main+0x1dc>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7ff f8dd 	bl	8000a34 <__aeabi_dcmplt>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00c      	beq.n	800189a <main+0x18a>
	          {
	            pwm_set_duty_cycle((uint32_t)outputVoltage, CHANNEL2);
 8001880:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <main+0x1e0>)
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f7ff f8fb 	bl	8000a84 <__aeabi_d2uiz>
 800188e:	4603      	mov	r3, r0
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff feee 	bl	8001674 <pwm_set_duty_cycle>
 8001898:	e00b      	b.n	80018b2 <main+0x1a2>
	          }
	          else
	          {
	            pwm_set_duty_cycle((uint32_t)outputVoltage, CHANNEL2);
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <main+0x1e0>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f7ff f8ee 	bl	8000a84 <__aeabi_d2uiz>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fee1 	bl	8001674 <pwm_set_duty_cycle>
	          }
	        }
	  	  HAL_Delay(1000);
 80018b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018b6:	f000 fae1 	bl	8001e7c <HAL_Delay>
	  	  INA238_ReadBusVoltage(&hINA238, &inputVoltage);
 80018ba:	e7a0      	b.n	80017fe <main+0xee>
 80018bc:	20000038 	.word	0x20000038
 80018c0:	20000028 	.word	0x20000028
 80018c4:	2000002a 	.word	0x2000002a
 80018c8:	2000002c 	.word	0x2000002c
 80018cc:	2000002e 	.word	0x2000002e
 80018d0:	20000030 	.word	0x20000030
 80018d4:	20000034 	.word	0x20000034
 80018d8:	20000064 	.word	0x20000064
 80018dc:	20000200 	.word	0x20000200
 80018e0:	20000010 	.word	0x20000010
 80018e4:	20000018 	.word	0x20000018
 80018e8:	20000020 	.word	0x20000020
 80018ec:	20000000 	.word	0x20000000
 80018f0:	200001a0 	.word	0x200001a0
 80018f4:	20000198 	.word	0x20000198
 80018f8:	200000b8 	.word	0x200000b8
 80018fc:	20000008 	.word	0x20000008
 8001900:	200001b0 	.word	0x200001b0
 8001904:	200001a8 	.word	0x200001a8
 8001908:	20000128 	.word	0x20000128
 800190c:	402c0000 	.word	0x402c0000
 8001910:	40040000 	.word	0x40040000

08001914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b094      	sub	sp, #80	@ 0x50
 8001918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191a:	f107 0320 	add.w	r3, r7, #32
 800191e:	2230      	movs	r2, #48	@ 0x30
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f002 fd38 	bl	8004398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	4b23      	ldr	r3, [pc, #140]	@ (80019cc <SystemClock_Config+0xb8>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	4a22      	ldr	r2, [pc, #136]	@ (80019cc <SystemClock_Config+0xb8>)
 8001942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001946:	6413      	str	r3, [r2, #64]	@ 0x40
 8001948:	4b20      	ldr	r3, [pc, #128]	@ (80019cc <SystemClock_Config+0xb8>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <SystemClock_Config+0xbc>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001960:	4a1b      	ldr	r2, [pc, #108]	@ (80019d0 <SystemClock_Config+0xbc>)
 8001962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <SystemClock_Config+0xbc>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001974:	2302      	movs	r3, #2
 8001976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001978:	2301      	movs	r3, #1
 800197a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800197c:	2310      	movs	r3, #16
 800197e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001980:	2300      	movs	r3, #0
 8001982:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001984:	f107 0320 	add.w	r3, r7, #32
 8001988:	4618      	mov	r0, r3
 800198a:	f001 fd29 	bl	80033e0 <HAL_RCC_OscConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001994:	f000 f8a0 	bl	8001ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001998:	230f      	movs	r3, #15
 800199a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800199c:	2300      	movs	r3, #0
 800199e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 ff8c 	bl	80038d0 <HAL_RCC_ClockConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80019be:	f000 f88b 	bl	8001ad8 <Error_Handler>
  }
}
 80019c2:	bf00      	nop
 80019c4:	3750      	adds	r7, #80	@ 0x50
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40007000 	.word	0x40007000

080019d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	@ 0x28
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019da:	f107 0320 	add.w	r3, r7, #32
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	611a      	str	r2, [r3, #16]
 80019f2:	615a      	str	r2, [r3, #20]
 80019f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019f6:	4b22      	ldr	r3, [pc, #136]	@ (8001a80 <MX_TIM3_Init+0xac>)
 80019f8:	4a22      	ldr	r2, [pc, #136]	@ (8001a84 <MX_TIM3_Init+0xb0>)
 80019fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019fc:	4b20      	ldr	r3, [pc, #128]	@ (8001a80 <MX_TIM3_Init+0xac>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a02:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <MX_TIM3_Init+0xac>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a08:	4b1d      	ldr	r3, [pc, #116]	@ (8001a80 <MX_TIM3_Init+0xac>)
 8001a0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a10:	4b1b      	ldr	r3, [pc, #108]	@ (8001a80 <MX_TIM3_Init+0xac>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a16:	4b1a      	ldr	r3, [pc, #104]	@ (8001a80 <MX_TIM3_Init+0xac>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a1c:	4818      	ldr	r0, [pc, #96]	@ (8001a80 <MX_TIM3_Init+0xac>)
 8001a1e:	f002 f923 	bl	8003c68 <HAL_TIM_PWM_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001a28:	f000 f856 	bl	8001ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a34:	f107 0320 	add.w	r3, r7, #32
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4811      	ldr	r0, [pc, #68]	@ (8001a80 <MX_TIM3_Init+0xac>)
 8001a3c:	f002 fc3e 	bl	80042bc <HAL_TIMEx_MasterConfigSynchronization>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001a46:	f000 f847 	bl	8001ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4a:	2360      	movs	r3, #96	@ 0x60
 8001a4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4807      	ldr	r0, [pc, #28]	@ (8001a80 <MX_TIM3_Init+0xac>)
 8001a62:	f002 f951 	bl	8003d08 <HAL_TIM_PWM_ConfigChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001a6c:	f000 f834 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a70:	4803      	ldr	r0, [pc, #12]	@ (8001a80 <MX_TIM3_Init+0xac>)
 8001a72:	f000 f8eb 	bl	8001c4c <HAL_TIM_MspPostInit>

}
 8001a76:	bf00      	nop
 8001a78:	3728      	adds	r7, #40	@ 0x28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200001b8 	.word	0x200001b8
 8001a84:	40000400 	.word	0x40000400

08001a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <MX_GPIO_Init+0x4c>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad4 <MX_GPIO_Init+0x4c>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad4 <MX_GPIO_Init+0x4c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <MX_GPIO_Init+0x4c>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	4a08      	ldr	r2, [pc, #32]	@ (8001ad4 <MX_GPIO_Init+0x4c>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <MX_GPIO_Init+0x4c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001adc:	b672      	cpsid	i
}
 8001ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <Error_Handler+0x8>

08001ae4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <HAL_MspInit+0x4c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af2:	4a0f      	ldr	r2, [pc, #60]	@ (8001b30 <HAL_MspInit+0x4c>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001afa:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <HAL_MspInit+0x4c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_MspInit+0x4c>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	4a08      	ldr	r2, [pc, #32]	@ (8001b30 <HAL_MspInit+0x4c>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_MspInit+0x4c>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800

08001b34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	@ 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a29      	ldr	r2, [pc, #164]	@ (8001bf8 <HAL_I2C_MspInit+0xc4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d14b      	bne.n	8001bee <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <HAL_I2C_MspInit+0xc8>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	4a27      	ldr	r2, [pc, #156]	@ (8001bfc <HAL_I2C_MspInit+0xc8>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b66:	4b25      	ldr	r3, [pc, #148]	@ (8001bfc <HAL_I2C_MspInit+0xc8>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b21      	ldr	r3, [pc, #132]	@ (8001bfc <HAL_I2C_MspInit+0xc8>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	4a20      	ldr	r2, [pc, #128]	@ (8001bfc <HAL_I2C_MspInit+0xc8>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b82:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <HAL_I2C_MspInit+0xc8>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b94:	2312      	movs	r3, #18
 8001b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4815      	ldr	r0, [pc, #84]	@ (8001c00 <HAL_I2C_MspInit+0xcc>)
 8001bac:	f000 fa70 	bl	8002090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb6:	2312      	movs	r3, #18
 8001bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	480d      	ldr	r0, [pc, #52]	@ (8001c04 <HAL_I2C_MspInit+0xd0>)
 8001bce:	f000 fa5f 	bl	8002090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <HAL_I2C_MspInit+0xc8>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	4a08      	ldr	r2, [pc, #32]	@ (8001bfc <HAL_I2C_MspInit+0xc8>)
 8001bdc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be2:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <HAL_I2C_MspInit+0xc8>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001bee:	bf00      	nop
 8001bf0:	3728      	adds	r7, #40	@ 0x28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40005c00 	.word	0x40005c00
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020800 	.word	0x40020800
 8001c04:	40020000 	.word	0x40020000

08001c08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0b      	ldr	r2, [pc, #44]	@ (8001c44 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d10d      	bne.n	8001c36 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <HAL_TIM_PWM_MspInit+0x40>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	4a09      	ldr	r2, [pc, #36]	@ (8001c48 <HAL_TIM_PWM_MspInit+0x40>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2a:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <HAL_TIM_PWM_MspInit+0x40>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40000400 	.word	0x40000400
 8001c48:	40023800 	.word	0x40023800

08001c4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a12      	ldr	r2, [pc, #72]	@ (8001cb4 <HAL_TIM_MspPostInit+0x68>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d11d      	bne.n	8001caa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HAL_TIM_MspPostInit+0x6c>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	4a10      	ldr	r2, [pc, #64]	@ (8001cb8 <HAL_TIM_MspPostInit+0x6c>)
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <HAL_TIM_MspPostInit+0x6c>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c8a:	2380      	movs	r3, #128	@ 0x80
 8001c8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9e:	f107 030c 	add.w	r3, r7, #12
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4805      	ldr	r0, [pc, #20]	@ (8001cbc <HAL_TIM_MspPostInit+0x70>)
 8001ca6:	f000 f9f3 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001caa:	bf00      	nop
 8001cac:	3720      	adds	r7, #32
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40000400 	.word	0x40000400
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020800 	.word	0x40020800

08001cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <NMI_Handler+0x4>

08001cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <HardFault_Handler+0x4>

08001cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <MemManage_Handler+0x4>

08001cd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <BusFault_Handler+0x4>

08001ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <UsageFault_Handler+0x4>

08001ce8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d16:	f000 f891 	bl	8001e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d24:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <SystemInit+0x20>)
 8001d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d2a:	4a05      	ldr	r2, [pc, #20]	@ (8001d40 <SystemInit+0x20>)
 8001d2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d48:	f7ff ffea 	bl	8001d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d4c:	480c      	ldr	r0, [pc, #48]	@ (8001d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d4e:	490d      	ldr	r1, [pc, #52]	@ (8001d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d50:	4a0d      	ldr	r2, [pc, #52]	@ (8001d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d54:	e002      	b.n	8001d5c <LoopCopyDataInit>

08001d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d5a:	3304      	adds	r3, #4

08001d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d60:	d3f9      	bcc.n	8001d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d62:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d64:	4c0a      	ldr	r4, [pc, #40]	@ (8001d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d68:	e001      	b.n	8001d6e <LoopFillZerobss>

08001d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d6c:	3204      	adds	r2, #4

08001d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d70:	d3fb      	bcc.n	8001d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d72:	f002 fb19 	bl	80043a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d76:	f7ff fccb 	bl	8001710 <main>
  bx  lr    
 8001d7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d7c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d84:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8001d88:	08004430 	.word	0x08004430
  ldr r2, =_sbss
 8001d8c:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8001d90:	20000230 	.word	0x20000230

08001d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d94:	e7fe      	b.n	8001d94 <ADC_IRQHandler>
	...

08001d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <HAL_Init+0x40>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd8 <HAL_Init+0x40>)
 8001da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001da8:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <HAL_Init+0x40>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <HAL_Init+0x40>)
 8001dae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <HAL_Init+0x40>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a07      	ldr	r2, [pc, #28]	@ (8001dd8 <HAL_Init+0x40>)
 8001dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	f000 f931 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc6:	200f      	movs	r0, #15
 8001dc8:	f000 f808 	bl	8001ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dcc:	f7ff fe8a 	bl	8001ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023c00 	.word	0x40023c00

08001ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de4:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <HAL_InitTick+0x54>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <HAL_InitTick+0x58>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f93b 	bl	8002076 <HAL_SYSTICK_Config>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00e      	b.n	8001e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b0f      	cmp	r3, #15
 8001e0e:	d80a      	bhi.n	8001e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e10:	2200      	movs	r2, #0
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f000 f911 	bl	800203e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e1c:	4a06      	ldr	r2, [pc, #24]	@ (8001e38 <HAL_InitTick+0x5c>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	e000      	b.n	8001e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	2000003c 	.word	0x2000003c
 8001e34:	20000044 	.word	0x20000044
 8001e38:	20000040 	.word	0x20000040

08001e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <HAL_IncTick+0x20>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <HAL_IncTick+0x24>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a04      	ldr	r2, [pc, #16]	@ (8001e60 <HAL_IncTick+0x24>)
 8001e4e:	6013      	str	r3, [r2, #0]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000044 	.word	0x20000044
 8001e60:	2000022c 	.word	0x2000022c

08001e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return uwTick;
 8001e68:	4b03      	ldr	r3, [pc, #12]	@ (8001e78 <HAL_GetTick+0x14>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	2000022c 	.word	0x2000022c

08001e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff ffee 	bl	8001e64 <HAL_GetTick>
 8001e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d005      	beq.n	8001ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec0 <HAL_Delay+0x44>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ea2:	bf00      	nop
 8001ea4:	f7ff ffde 	bl	8001e64 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d8f7      	bhi.n	8001ea4 <HAL_Delay+0x28>
  {
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000044 	.word	0x20000044

08001ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef6:	4a04      	ldr	r2, [pc, #16]	@ (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	60d3      	str	r3, [r2, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f10:	4b04      	ldr	r3, [pc, #16]	@ (8001f24 <__NVIC_GetPriorityGrouping+0x18>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	f003 0307 	and.w	r3, r3, #7
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	db0a      	blt.n	8001f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	490c      	ldr	r1, [pc, #48]	@ (8001f74 <__NVIC_SetPriority+0x4c>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	0112      	lsls	r2, r2, #4
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f50:	e00a      	b.n	8001f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4908      	ldr	r1, [pc, #32]	@ (8001f78 <__NVIC_SetPriority+0x50>)
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	3b04      	subs	r3, #4
 8001f60:	0112      	lsls	r2, r2, #4
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	440b      	add	r3, r1
 8001f66:	761a      	strb	r2, [r3, #24]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000e100 	.word	0xe000e100
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	@ 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f1c3 0307 	rsb	r3, r3, #7
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	bf28      	it	cs
 8001f9a:	2304      	movcs	r3, #4
 8001f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d902      	bls.n	8001fac <NVIC_EncodePriority+0x30>
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3b03      	subs	r3, #3
 8001faa:	e000      	b.n	8001fae <NVIC_EncodePriority+0x32>
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	43d9      	mvns	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	4313      	orrs	r3, r2
         );
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3724      	adds	r7, #36	@ 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ff4:	d301      	bcc.n	8001ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00f      	b.n	800201a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8002024 <SysTick_Config+0x40>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002002:	210f      	movs	r1, #15
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	f7ff ff8e 	bl	8001f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800200c:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <SysTick_Config+0x40>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002012:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <SysTick_Config+0x40>)
 8002014:	2207      	movs	r2, #7
 8002016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	e000e010 	.word	0xe000e010

08002028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff47 	bl	8001ec4 <__NVIC_SetPriorityGrouping>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002050:	f7ff ff5c 	bl	8001f0c <__NVIC_GetPriorityGrouping>
 8002054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	6978      	ldr	r0, [r7, #20]
 800205c:	f7ff ff8e 	bl	8001f7c <NVIC_EncodePriority>
 8002060:	4602      	mov	r2, r0
 8002062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff5d 	bl	8001f28 <__NVIC_SetPriority>
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffb0 	bl	8001fe4 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	@ 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	e159      	b.n	8002360 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020ac:	2201      	movs	r2, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	f040 8148 	bne.w	800235a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d005      	beq.n	80020e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d130      	bne.n	8002144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002118:	2201      	movs	r2, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 0201 	and.w	r2, r3, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b03      	cmp	r3, #3
 800214e:	d017      	beq.n	8002180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d123      	bne.n	80021d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	08da      	lsrs	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3208      	adds	r2, #8
 8002194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	220f      	movs	r2, #15
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	08da      	lsrs	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3208      	adds	r2, #8
 80021ce:	69b9      	ldr	r1, [r7, #24]
 80021d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0203 	and.w	r2, r3, #3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80a2 	beq.w	800235a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b57      	ldr	r3, [pc, #348]	@ (8002378 <HAL_GPIO_Init+0x2e8>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	4a56      	ldr	r2, [pc, #344]	@ (8002378 <HAL_GPIO_Init+0x2e8>)
 8002220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002224:	6453      	str	r3, [r2, #68]	@ 0x44
 8002226:	4b54      	ldr	r3, [pc, #336]	@ (8002378 <HAL_GPIO_Init+0x2e8>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002232:	4a52      	ldr	r2, [pc, #328]	@ (800237c <HAL_GPIO_Init+0x2ec>)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	220f      	movs	r2, #15
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a49      	ldr	r2, [pc, #292]	@ (8002380 <HAL_GPIO_Init+0x2f0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d019      	beq.n	8002292 <HAL_GPIO_Init+0x202>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a48      	ldr	r2, [pc, #288]	@ (8002384 <HAL_GPIO_Init+0x2f4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d013      	beq.n	800228e <HAL_GPIO_Init+0x1fe>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a47      	ldr	r2, [pc, #284]	@ (8002388 <HAL_GPIO_Init+0x2f8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00d      	beq.n	800228a <HAL_GPIO_Init+0x1fa>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a46      	ldr	r2, [pc, #280]	@ (800238c <HAL_GPIO_Init+0x2fc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d007      	beq.n	8002286 <HAL_GPIO_Init+0x1f6>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a45      	ldr	r2, [pc, #276]	@ (8002390 <HAL_GPIO_Init+0x300>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d101      	bne.n	8002282 <HAL_GPIO_Init+0x1f2>
 800227e:	2304      	movs	r3, #4
 8002280:	e008      	b.n	8002294 <HAL_GPIO_Init+0x204>
 8002282:	2307      	movs	r3, #7
 8002284:	e006      	b.n	8002294 <HAL_GPIO_Init+0x204>
 8002286:	2303      	movs	r3, #3
 8002288:	e004      	b.n	8002294 <HAL_GPIO_Init+0x204>
 800228a:	2302      	movs	r3, #2
 800228c:	e002      	b.n	8002294 <HAL_GPIO_Init+0x204>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_GPIO_Init+0x204>
 8002292:	2300      	movs	r3, #0
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	f002 0203 	and.w	r2, r2, #3
 800229a:	0092      	lsls	r2, r2, #2
 800229c:	4093      	lsls	r3, r2
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022a4:	4935      	ldr	r1, [pc, #212]	@ (800237c <HAL_GPIO_Init+0x2ec>)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	3302      	adds	r3, #2
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022b2:	4b38      	ldr	r3, [pc, #224]	@ (8002394 <HAL_GPIO_Init+0x304>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002394 <HAL_GPIO_Init+0x304>)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002394 <HAL_GPIO_Init+0x304>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002300:	4a24      	ldr	r2, [pc, #144]	@ (8002394 <HAL_GPIO_Init+0x304>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002306:	4b23      	ldr	r3, [pc, #140]	@ (8002394 <HAL_GPIO_Init+0x304>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800232a:	4a1a      	ldr	r2, [pc, #104]	@ (8002394 <HAL_GPIO_Init+0x304>)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002330:	4b18      	ldr	r3, [pc, #96]	@ (8002394 <HAL_GPIO_Init+0x304>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002354:	4a0f      	ldr	r2, [pc, #60]	@ (8002394 <HAL_GPIO_Init+0x304>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3301      	adds	r3, #1
 800235e:	61fb      	str	r3, [r7, #28]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2b0f      	cmp	r3, #15
 8002364:	f67f aea2 	bls.w	80020ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3724      	adds	r7, #36	@ 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	40013800 	.word	0x40013800
 8002380:	40020000 	.word	0x40020000
 8002384:	40020400 	.word	0x40020400
 8002388:	40020800 	.word	0x40020800
 800238c:	40020c00 	.word	0x40020c00
 8002390:	40021000 	.word	0x40021000
 8002394:	40013c00 	.word	0x40013c00

08002398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e12b      	b.n	8002602 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d106      	bne.n	80023c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff fbb8 	bl	8001b34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2224      	movs	r2, #36	@ 0x24
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023fc:	f001 fc20 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 8002400:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4a81      	ldr	r2, [pc, #516]	@ (800260c <HAL_I2C_Init+0x274>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d807      	bhi.n	800241c <HAL_I2C_Init+0x84>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4a80      	ldr	r2, [pc, #512]	@ (8002610 <HAL_I2C_Init+0x278>)
 8002410:	4293      	cmp	r3, r2
 8002412:	bf94      	ite	ls
 8002414:	2301      	movls	r3, #1
 8002416:	2300      	movhi	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	e006      	b.n	800242a <HAL_I2C_Init+0x92>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4a7d      	ldr	r2, [pc, #500]	@ (8002614 <HAL_I2C_Init+0x27c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	bf94      	ite	ls
 8002424:	2301      	movls	r3, #1
 8002426:	2300      	movhi	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e0e7      	b.n	8002602 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4a78      	ldr	r2, [pc, #480]	@ (8002618 <HAL_I2C_Init+0x280>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0c9b      	lsrs	r3, r3, #18
 800243c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a6a      	ldr	r2, [pc, #424]	@ (800260c <HAL_I2C_Init+0x274>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d802      	bhi.n	800246c <HAL_I2C_Init+0xd4>
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	3301      	adds	r3, #1
 800246a:	e009      	b.n	8002480 <HAL_I2C_Init+0xe8>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	4a69      	ldr	r2, [pc, #420]	@ (800261c <HAL_I2C_Init+0x284>)
 8002478:	fba2 2303 	umull	r2, r3, r2, r3
 800247c:	099b      	lsrs	r3, r3, #6
 800247e:	3301      	adds	r3, #1
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	430b      	orrs	r3, r1
 8002486:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002492:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	495c      	ldr	r1, [pc, #368]	@ (800260c <HAL_I2C_Init+0x274>)
 800249c:	428b      	cmp	r3, r1
 800249e:	d819      	bhi.n	80024d4 <HAL_I2C_Init+0x13c>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1e59      	subs	r1, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ae:	1c59      	adds	r1, r3, #1
 80024b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024b4:	400b      	ands	r3, r1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <HAL_I2C_Init+0x138>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1e59      	subs	r1, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c8:	3301      	adds	r3, #1
 80024ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ce:	e051      	b.n	8002574 <HAL_I2C_Init+0x1dc>
 80024d0:	2304      	movs	r3, #4
 80024d2:	e04f      	b.n	8002574 <HAL_I2C_Init+0x1dc>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d111      	bne.n	8002500 <HAL_I2C_Init+0x168>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1e58      	subs	r0, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	440b      	add	r3, r1
 80024ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ee:	3301      	adds	r3, #1
 80024f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	bf0c      	ite	eq
 80024f8:	2301      	moveq	r3, #1
 80024fa:	2300      	movne	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	e012      	b.n	8002526 <HAL_I2C_Init+0x18e>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1e58      	subs	r0, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	0099      	lsls	r1, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	fbb0 f3f3 	udiv	r3, r0, r3
 8002516:	3301      	adds	r3, #1
 8002518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_I2C_Init+0x196>
 800252a:	2301      	movs	r3, #1
 800252c:	e022      	b.n	8002574 <HAL_I2C_Init+0x1dc>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10e      	bne.n	8002554 <HAL_I2C_Init+0x1bc>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1e58      	subs	r0, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6859      	ldr	r1, [r3, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	440b      	add	r3, r1
 8002544:	fbb0 f3f3 	udiv	r3, r0, r3
 8002548:	3301      	adds	r3, #1
 800254a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002552:	e00f      	b.n	8002574 <HAL_I2C_Init+0x1dc>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1e58      	subs	r0, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	0099      	lsls	r1, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	fbb0 f3f3 	udiv	r3, r0, r3
 800256a:	3301      	adds	r3, #1
 800256c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002570:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	6809      	ldr	r1, [r1, #0]
 8002578:	4313      	orrs	r3, r2
 800257a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69da      	ldr	r2, [r3, #28]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6911      	ldr	r1, [r2, #16]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68d2      	ldr	r2, [r2, #12]
 80025ae:	4311      	orrs	r1, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	430b      	orrs	r3, r1
 80025b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	000186a0 	.word	0x000186a0
 8002610:	001e847f 	.word	0x001e847f
 8002614:	003d08ff 	.word	0x003d08ff
 8002618:	431bde83 	.word	0x431bde83
 800261c:	10624dd3 	.word	0x10624dd3

08002620 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	461a      	mov	r2, r3
 800262e:	4603      	mov	r3, r0
 8002630:	817b      	strh	r3, [r7, #10]
 8002632:	460b      	mov	r3, r1
 8002634:	813b      	strh	r3, [r7, #8]
 8002636:	4613      	mov	r3, r2
 8002638:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800263a:	f7ff fc13 	bl	8001e64 <HAL_GetTick>
 800263e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b20      	cmp	r3, #32
 800264a:	f040 80d9 	bne.w	8002800 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	2319      	movs	r3, #25
 8002654:	2201      	movs	r2, #1
 8002656:	496d      	ldr	r1, [pc, #436]	@ (800280c <HAL_I2C_Mem_Write+0x1ec>)
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fc8b 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002664:	2302      	movs	r3, #2
 8002666:	e0cc      	b.n	8002802 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_I2C_Mem_Write+0x56>
 8002672:	2302      	movs	r3, #2
 8002674:	e0c5      	b.n	8002802 <HAL_I2C_Mem_Write+0x1e2>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d007      	beq.n	800269c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2221      	movs	r2, #33	@ 0x21
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2240      	movs	r2, #64	@ 0x40
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a3a      	ldr	r2, [r7, #32]
 80026c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a4d      	ldr	r2, [pc, #308]	@ (8002810 <HAL_I2C_Mem_Write+0x1f0>)
 80026dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026de:	88f8      	ldrh	r0, [r7, #6]
 80026e0:	893a      	ldrh	r2, [r7, #8]
 80026e2:	8979      	ldrh	r1, [r7, #10]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	9301      	str	r3, [sp, #4]
 80026e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	4603      	mov	r3, r0
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fac2 	bl	8002c78 <I2C_RequestMemoryWrite>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d052      	beq.n	80027a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e081      	b.n	8002802 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 fd50 	bl	80031a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00d      	beq.n	800272a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	2b04      	cmp	r3, #4
 8002714:	d107      	bne.n	8002726 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002724:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e06b      	b.n	8002802 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b04      	cmp	r3, #4
 8002766:	d11b      	bne.n	80027a0 <HAL_I2C_Mem_Write+0x180>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800276c:	2b00      	cmp	r3, #0
 800276e:	d017      	beq.n	80027a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002774:	781a      	ldrb	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1aa      	bne.n	80026fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fd43 	bl	8003238 <I2C_WaitOnBTFFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00d      	beq.n	80027d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d107      	bne.n	80027d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e016      	b.n	8002802 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	e000      	b.n	8002802 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002800:	2302      	movs	r3, #2
  }
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	00100002 	.word	0x00100002
 8002810:	ffff0000 	.word	0xffff0000

08002814 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08c      	sub	sp, #48	@ 0x30
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	4608      	mov	r0, r1
 800281e:	4611      	mov	r1, r2
 8002820:	461a      	mov	r2, r3
 8002822:	4603      	mov	r3, r0
 8002824:	817b      	strh	r3, [r7, #10]
 8002826:	460b      	mov	r3, r1
 8002828:	813b      	strh	r3, [r7, #8]
 800282a:	4613      	mov	r3, r2
 800282c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800282e:	f7ff fb19 	bl	8001e64 <HAL_GetTick>
 8002832:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b20      	cmp	r3, #32
 800283e:	f040 8214 	bne.w	8002c6a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	2319      	movs	r3, #25
 8002848:	2201      	movs	r2, #1
 800284a:	497b      	ldr	r1, [pc, #492]	@ (8002a38 <HAL_I2C_Mem_Read+0x224>)
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 fb91 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002858:	2302      	movs	r3, #2
 800285a:	e207      	b.n	8002c6c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_I2C_Mem_Read+0x56>
 8002866:	2302      	movs	r3, #2
 8002868:	e200      	b.n	8002c6c <HAL_I2C_Mem_Read+0x458>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d007      	beq.n	8002890 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800289e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2222      	movs	r2, #34	@ 0x22
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2240      	movs	r2, #64	@ 0x40
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80028c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4a5b      	ldr	r2, [pc, #364]	@ (8002a3c <HAL_I2C_Mem_Read+0x228>)
 80028d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028d2:	88f8      	ldrh	r0, [r7, #6]
 80028d4:	893a      	ldrh	r2, [r7, #8]
 80028d6:	8979      	ldrh	r1, [r7, #10]
 80028d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	4603      	mov	r3, r0
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fa5e 	bl	8002da4 <I2C_RequestMemoryRead>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e1bc      	b.n	8002c6c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d113      	bne.n	8002922 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fa:	2300      	movs	r3, #0
 80028fc:	623b      	str	r3, [r7, #32]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	623b      	str	r3, [r7, #32]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	623b      	str	r3, [r7, #32]
 800290e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e190      	b.n	8002c44 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002926:	2b01      	cmp	r3, #1
 8002928:	d11b      	bne.n	8002962 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002938:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	e170      	b.n	8002c44 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002966:	2b02      	cmp	r3, #2
 8002968:	d11b      	bne.n	80029a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002978:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002988:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298a:	2300      	movs	r3, #0
 800298c:	61bb      	str	r3, [r7, #24]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	e150      	b.n	8002c44 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029b8:	e144      	b.n	8002c44 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029be:	2b03      	cmp	r3, #3
 80029c0:	f200 80f1 	bhi.w	8002ba6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d123      	bne.n	8002a14 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 fc79 	bl	80032c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e145      	b.n	8002c6c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a12:	e117      	b.n	8002c44 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d14e      	bne.n	8002aba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a22:	2200      	movs	r2, #0
 8002a24:	4906      	ldr	r1, [pc, #24]	@ (8002a40 <HAL_I2C_Mem_Read+0x22c>)
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 faa4 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d008      	beq.n	8002a44 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e11a      	b.n	8002c6c <HAL_I2C_Mem_Read+0x458>
 8002a36:	bf00      	nop
 8002a38:	00100002 	.word	0x00100002
 8002a3c:	ffff0000 	.word	0xffff0000
 8002a40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ab8:	e0c4      	b.n	8002c44 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	496c      	ldr	r1, [pc, #432]	@ (8002c74 <HAL_I2C_Mem_Read+0x460>)
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 fa55 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0cb      	b.n	8002c6c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ae2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	4955      	ldr	r1, [pc, #340]	@ (8002c74 <HAL_I2C_Mem_Read+0x460>)
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 fa27 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e09d      	b.n	8002c6c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ba4:	e04e      	b.n	8002c44 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 fb8c 	bl	80032c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e058      	b.n	8002c6c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d124      	bne.n	8002c44 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d107      	bne.n	8002c12 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c10:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f47f aeb6 	bne.w	80029ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e000      	b.n	8002c6c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c6a:	2302      	movs	r3, #2
  }
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3728      	adds	r7, #40	@ 0x28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	00010004 	.word	0x00010004

08002c78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	4608      	mov	r0, r1
 8002c82:	4611      	mov	r1, r2
 8002c84:	461a      	mov	r2, r3
 8002c86:	4603      	mov	r3, r0
 8002c88:	817b      	strh	r3, [r7, #10]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	813b      	strh	r3, [r7, #8]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ca0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f960 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00d      	beq.n	8002cd6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cc8:	d103      	bne.n	8002cd2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e05f      	b.n	8002d96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cd6:	897b      	ldrh	r3, [r7, #10]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ce4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	6a3a      	ldr	r2, [r7, #32]
 8002cea:	492d      	ldr	r1, [pc, #180]	@ (8002da0 <I2C_RequestMemoryWrite+0x128>)
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f9bb 	bl	8003068 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e04c      	b.n	8002d96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d14:	6a39      	ldr	r1, [r7, #32]
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 fa46 	bl	80031a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00d      	beq.n	8002d3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d107      	bne.n	8002d3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e02b      	b.n	8002d96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d105      	bne.n	8002d50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d44:	893b      	ldrh	r3, [r7, #8]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	611a      	str	r2, [r3, #16]
 8002d4e:	e021      	b.n	8002d94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d50:	893b      	ldrh	r3, [r7, #8]
 8002d52:	0a1b      	lsrs	r3, r3, #8
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d60:	6a39      	ldr	r1, [r7, #32]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 fa20 	bl	80031a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00d      	beq.n	8002d8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d107      	bne.n	8002d86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e005      	b.n	8002d96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d8a:	893b      	ldrh	r3, [r7, #8]
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	00010002 	.word	0x00010002

08002da4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	4608      	mov	r0, r1
 8002dae:	4611      	mov	r1, r2
 8002db0:	461a      	mov	r2, r3
 8002db2:	4603      	mov	r3, r0
 8002db4:	817b      	strh	r3, [r7, #10]
 8002db6:	460b      	mov	r3, r1
 8002db8:	813b      	strh	r3, [r7, #8]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002dcc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ddc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f8c2 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00d      	beq.n	8002e12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e04:	d103      	bne.n	8002e0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e0aa      	b.n	8002f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e12:	897b      	ldrh	r3, [r7, #10]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	6a3a      	ldr	r2, [r7, #32]
 8002e26:	4952      	ldr	r1, [pc, #328]	@ (8002f70 <I2C_RequestMemoryRead+0x1cc>)
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f91d 	bl	8003068 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e097      	b.n	8002f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e50:	6a39      	ldr	r1, [r7, #32]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f9a8 	bl	80031a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00d      	beq.n	8002e7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d107      	bne.n	8002e76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e076      	b.n	8002f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d105      	bne.n	8002e8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e80:	893b      	ldrh	r3, [r7, #8]
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	611a      	str	r2, [r3, #16]
 8002e8a:	e021      	b.n	8002ed0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e8c:	893b      	ldrh	r3, [r7, #8]
 8002e8e:	0a1b      	lsrs	r3, r3, #8
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e9c:	6a39      	ldr	r1, [r7, #32]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f982 	bl	80031a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d107      	bne.n	8002ec2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e050      	b.n	8002f68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec6:	893b      	ldrh	r3, [r7, #8]
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed2:	6a39      	ldr	r1, [r7, #32]
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 f967 	bl	80031a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00d      	beq.n	8002efc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d107      	bne.n	8002ef8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ef6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e035      	b.n	8002f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f82b 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00d      	beq.n	8002f40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f32:	d103      	bne.n	8002f3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e013      	b.n	8002f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f40:	897b      	ldrh	r3, [r7, #10]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	6a3a      	ldr	r2, [r7, #32]
 8002f54:	4906      	ldr	r1, [pc, #24]	@ (8002f70 <I2C_RequestMemoryRead+0x1cc>)
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f886 	bl	8003068 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	00010002 	.word	0x00010002

08002f74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f84:	e048      	b.n	8003018 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8c:	d044      	beq.n	8003018 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8e:	f7fe ff69 	bl	8001e64 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d302      	bcc.n	8002fa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d139      	bne.n	8003018 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	0c1b      	lsrs	r3, r3, #16
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d10d      	bne.n	8002fca <I2C_WaitOnFlagUntilTimeout+0x56>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	43da      	mvns	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2301      	moveq	r3, #1
 8002fc2:	2300      	movne	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	e00c      	b.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	43da      	mvns	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d116      	bne.n	8003018 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003004:	f043 0220 	orr.w	r2, r3, #32
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e023      	b.n	8003060 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	0c1b      	lsrs	r3, r3, #16
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b01      	cmp	r3, #1
 8003020:	d10d      	bne.n	800303e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	43da      	mvns	r2, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	4013      	ands	r3, r2
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	e00c      	b.n	8003058 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	43da      	mvns	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4013      	ands	r3, r2
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	429a      	cmp	r2, r3
 800305c:	d093      	beq.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
 8003074:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003076:	e071      	b.n	800315c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003086:	d123      	bne.n	80030d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003096:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030bc:	f043 0204 	orr.w	r2, r3, #4
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e067      	b.n	80031a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d6:	d041      	beq.n	800315c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d8:	f7fe fec4 	bl	8001e64 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d302      	bcc.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d136      	bne.n	800315c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	0c1b      	lsrs	r3, r3, #16
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d10c      	bne.n	8003112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	43da      	mvns	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4013      	ands	r3, r2
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	e00b      	b.n	800312a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	43da      	mvns	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4013      	ands	r3, r2
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d016      	beq.n	800315c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e021      	b.n	80031a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	0c1b      	lsrs	r3, r3, #16
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b01      	cmp	r3, #1
 8003164:	d10c      	bne.n	8003180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	43da      	mvns	r2, r3
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	4013      	ands	r3, r2
 8003172:	b29b      	uxth	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	e00b      	b.n	8003198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	43da      	mvns	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4013      	ands	r3, r2
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	bf14      	ite	ne
 8003192:	2301      	movne	r3, #1
 8003194:	2300      	moveq	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	f47f af6d 	bne.w	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031b4:	e034      	b.n	8003220 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f8e3 	bl	8003382 <I2C_IsAcknowledgeFailed>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e034      	b.n	8003230 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031cc:	d028      	beq.n	8003220 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ce:	f7fe fe49 	bl	8001e64 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d302      	bcc.n	80031e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d11d      	bne.n	8003220 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ee:	2b80      	cmp	r3, #128	@ 0x80
 80031f0:	d016      	beq.n	8003220 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	f043 0220 	orr.w	r2, r3, #32
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e007      	b.n	8003230 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322a:	2b80      	cmp	r3, #128	@ 0x80
 800322c:	d1c3      	bne.n	80031b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003244:	e034      	b.n	80032b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f89b 	bl	8003382 <I2C_IsAcknowledgeFailed>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e034      	b.n	80032c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d028      	beq.n	80032b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800325e:	f7fe fe01 	bl	8001e64 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	429a      	cmp	r2, r3
 800326c:	d302      	bcc.n	8003274 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d11d      	bne.n	80032b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b04      	cmp	r3, #4
 8003280:	d016      	beq.n	80032b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329c:	f043 0220 	orr.w	r2, r3, #32
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e007      	b.n	80032c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d1c3      	bne.n	8003246 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032d4:	e049      	b.n	800336a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b10      	cmp	r3, #16
 80032e2:	d119      	bne.n	8003318 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0210 	mvn.w	r2, #16
 80032ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e030      	b.n	800337a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003318:	f7fe fda4 	bl	8001e64 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	429a      	cmp	r2, r3
 8003326:	d302      	bcc.n	800332e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d11d      	bne.n	800336a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003338:	2b40      	cmp	r3, #64	@ 0x40
 800333a:	d016      	beq.n	800336a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	f043 0220 	orr.w	r2, r3, #32
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e007      	b.n	800337a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003374:	2b40      	cmp	r3, #64	@ 0x40
 8003376:	d1ae      	bne.n	80032d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003398:	d11b      	bne.n	80033d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	f043 0204 	orr.w	r2, r3, #4
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e267      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d075      	beq.n	80034ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033fe:	4b88      	ldr	r3, [pc, #544]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b04      	cmp	r3, #4
 8003408:	d00c      	beq.n	8003424 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340a:	4b85      	ldr	r3, [pc, #532]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003412:	2b08      	cmp	r3, #8
 8003414:	d112      	bne.n	800343c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003416:	4b82      	ldr	r3, [pc, #520]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800341e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003422:	d10b      	bne.n	800343c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003424:	4b7e      	ldr	r3, [pc, #504]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d05b      	beq.n	80034e8 <HAL_RCC_OscConfig+0x108>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d157      	bne.n	80034e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e242      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003444:	d106      	bne.n	8003454 <HAL_RCC_OscConfig+0x74>
 8003446:	4b76      	ldr	r3, [pc, #472]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a75      	ldr	r2, [pc, #468]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	e01d      	b.n	8003490 <HAL_RCC_OscConfig+0xb0>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800345c:	d10c      	bne.n	8003478 <HAL_RCC_OscConfig+0x98>
 800345e:	4b70      	ldr	r3, [pc, #448]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6f      	ldr	r2, [pc, #444]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	4b6d      	ldr	r3, [pc, #436]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a6c      	ldr	r2, [pc, #432]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	e00b      	b.n	8003490 <HAL_RCC_OscConfig+0xb0>
 8003478:	4b69      	ldr	r3, [pc, #420]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a68      	ldr	r2, [pc, #416]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 800347e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	4b66      	ldr	r3, [pc, #408]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a65      	ldr	r2, [pc, #404]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 800348a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800348e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d013      	beq.n	80034c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fe fce4 	bl	8001e64 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a0:	f7fe fce0 	bl	8001e64 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	@ 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e207      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0xc0>
 80034be:	e014      	b.n	80034ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fe fcd0 	bl	8001e64 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c8:	f7fe fccc 	bl	8001e64 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	@ 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e1f3      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034da:	4b51      	ldr	r3, [pc, #324]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0xe8>
 80034e6:	e000      	b.n	80034ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d063      	beq.n	80035be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00b      	beq.n	800351a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003502:	4b47      	ldr	r3, [pc, #284]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800350a:	2b08      	cmp	r3, #8
 800350c:	d11c      	bne.n	8003548 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800350e:	4b44      	ldr	r3, [pc, #272]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d116      	bne.n	8003548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351a:	4b41      	ldr	r3, [pc, #260]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <HAL_RCC_OscConfig+0x152>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d001      	beq.n	8003532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e1c7      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003532:	4b3b      	ldr	r3, [pc, #236]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4937      	ldr	r1, [pc, #220]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003546:	e03a      	b.n	80035be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003550:	4b34      	ldr	r3, [pc, #208]	@ (8003624 <HAL_RCC_OscConfig+0x244>)
 8003552:	2201      	movs	r2, #1
 8003554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003556:	f7fe fc85 	bl	8001e64 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800355e:	f7fe fc81 	bl	8001e64 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e1a8      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003570:	4b2b      	ldr	r3, [pc, #172]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357c:	4b28      	ldr	r3, [pc, #160]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4925      	ldr	r1, [pc, #148]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 800358c:	4313      	orrs	r3, r2
 800358e:	600b      	str	r3, [r1, #0]
 8003590:	e015      	b.n	80035be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003592:	4b24      	ldr	r3, [pc, #144]	@ (8003624 <HAL_RCC_OscConfig+0x244>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fe fc64 	bl	8001e64 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a0:	f7fe fc60 	bl	8001e64 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e187      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d036      	beq.n	8003638 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d016      	beq.n	8003600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d2:	4b15      	ldr	r3, [pc, #84]	@ (8003628 <HAL_RCC_OscConfig+0x248>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d8:	f7fe fc44 	bl	8001e64 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e0:	f7fe fc40 	bl	8001e64 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e167      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 80035f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x200>
 80035fe:	e01b      	b.n	8003638 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003600:	4b09      	ldr	r3, [pc, #36]	@ (8003628 <HAL_RCC_OscConfig+0x248>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003606:	f7fe fc2d 	bl	8001e64 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800360c:	e00e      	b.n	800362c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800360e:	f7fe fc29 	bl	8001e64 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d907      	bls.n	800362c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e150      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
 8003620:	40023800 	.word	0x40023800
 8003624:	42470000 	.word	0x42470000
 8003628:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800362c:	4b88      	ldr	r3, [pc, #544]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 800362e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1ea      	bne.n	800360e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8097 	beq.w	8003774 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003646:	2300      	movs	r3, #0
 8003648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800364a:	4b81      	ldr	r3, [pc, #516]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10f      	bne.n	8003676 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	4b7d      	ldr	r3, [pc, #500]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	4a7c      	ldr	r2, [pc, #496]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 8003660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003664:	6413      	str	r3, [r2, #64]	@ 0x40
 8003666:	4b7a      	ldr	r3, [pc, #488]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003672:	2301      	movs	r3, #1
 8003674:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003676:	4b77      	ldr	r3, [pc, #476]	@ (8003854 <HAL_RCC_OscConfig+0x474>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d118      	bne.n	80036b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003682:	4b74      	ldr	r3, [pc, #464]	@ (8003854 <HAL_RCC_OscConfig+0x474>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a73      	ldr	r2, [pc, #460]	@ (8003854 <HAL_RCC_OscConfig+0x474>)
 8003688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800368c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800368e:	f7fe fbe9 	bl	8001e64 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003696:	f7fe fbe5 	bl	8001e64 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e10c      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003854 <HAL_RCC_OscConfig+0x474>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d106      	bne.n	80036ca <HAL_RCC_OscConfig+0x2ea>
 80036bc:	4b64      	ldr	r3, [pc, #400]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c0:	4a63      	ldr	r2, [pc, #396]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c8:	e01c      	b.n	8003704 <HAL_RCC_OscConfig+0x324>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b05      	cmp	r3, #5
 80036d0:	d10c      	bne.n	80036ec <HAL_RCC_OscConfig+0x30c>
 80036d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036d8:	f043 0304 	orr.w	r3, r3, #4
 80036dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80036de:	4b5c      	ldr	r3, [pc, #368]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ea:	e00b      	b.n	8003704 <HAL_RCC_OscConfig+0x324>
 80036ec:	4b58      	ldr	r3, [pc, #352]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f0:	4a57      	ldr	r2, [pc, #348]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f8:	4b55      	ldr	r3, [pc, #340]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fc:	4a54      	ldr	r2, [pc, #336]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036fe:	f023 0304 	bic.w	r3, r3, #4
 8003702:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d015      	beq.n	8003738 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370c:	f7fe fbaa 	bl	8001e64 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003712:	e00a      	b.n	800372a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003714:	f7fe fba6 	bl	8001e64 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003722:	4293      	cmp	r3, r2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e0cb      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372a:	4b49      	ldr	r3, [pc, #292]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0ee      	beq.n	8003714 <HAL_RCC_OscConfig+0x334>
 8003736:	e014      	b.n	8003762 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003738:	f7fe fb94 	bl	8001e64 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800373e:	e00a      	b.n	8003756 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003740:	f7fe fb90 	bl	8001e64 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800374e:	4293      	cmp	r3, r2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e0b5      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003756:	4b3e      	ldr	r3, [pc, #248]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1ee      	bne.n	8003740 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003762:	7dfb      	ldrb	r3, [r7, #23]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d105      	bne.n	8003774 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003768:	4b39      	ldr	r3, [pc, #228]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 800376a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376c:	4a38      	ldr	r2, [pc, #224]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 800376e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003772:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80a1 	beq.w	80038c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800377e:	4b34      	ldr	r3, [pc, #208]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b08      	cmp	r3, #8
 8003788:	d05c      	beq.n	8003844 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d141      	bne.n	8003816 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003792:	4b31      	ldr	r3, [pc, #196]	@ (8003858 <HAL_RCC_OscConfig+0x478>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fe fb64 	bl	8001e64 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fe fb60 	bl	8001e64 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e087      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	4b27      	ldr	r3, [pc, #156]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69da      	ldr	r2, [r3, #28]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	019b      	lsls	r3, r3, #6
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	3b01      	subs	r3, #1
 80037d8:	041b      	lsls	r3, r3, #16
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e0:	061b      	lsls	r3, r3, #24
 80037e2:	491b      	ldr	r1, [pc, #108]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003858 <HAL_RCC_OscConfig+0x478>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ee:	f7fe fb39 	bl	8001e64 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f6:	f7fe fb35 	bl	8001e64 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e05c      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003808:	4b11      	ldr	r3, [pc, #68]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x416>
 8003814:	e054      	b.n	80038c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003816:	4b10      	ldr	r3, [pc, #64]	@ (8003858 <HAL_RCC_OscConfig+0x478>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fe fb22 	bl	8001e64 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003824:	f7fe fb1e 	bl	8001e64 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e045      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003836:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0x444>
 8003842:	e03d      	b.n	80038c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d107      	bne.n	800385c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e038      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
 8003850:	40023800 	.word	0x40023800
 8003854:	40007000 	.word	0x40007000
 8003858:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800385c:	4b1b      	ldr	r3, [pc, #108]	@ (80038cc <HAL_RCC_OscConfig+0x4ec>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d028      	beq.n	80038bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d121      	bne.n	80038bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003882:	429a      	cmp	r2, r3
 8003884:	d11a      	bne.n	80038bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800388c:	4013      	ands	r3, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003892:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003894:	4293      	cmp	r3, r2
 8003896:	d111      	bne.n	80038bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a2:	085b      	lsrs	r3, r3, #1
 80038a4:	3b01      	subs	r3, #1
 80038a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d107      	bne.n	80038bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40023800 	.word	0x40023800

080038d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0cc      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038e4:	4b68      	ldr	r3, [pc, #416]	@ (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d90c      	bls.n	800390c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f2:	4b65      	ldr	r3, [pc, #404]	@ (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	4b63      	ldr	r3, [pc, #396]	@ (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0b8      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d020      	beq.n	800395a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003924:	4b59      	ldr	r3, [pc, #356]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	4a58      	ldr	r2, [pc, #352]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800392e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800393c:	4b53      	ldr	r3, [pc, #332]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4a52      	ldr	r2, [pc, #328]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003948:	4b50      	ldr	r3, [pc, #320]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	494d      	ldr	r1, [pc, #308]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d044      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d107      	bne.n	800397e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396e:	4b47      	ldr	r3, [pc, #284]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d119      	bne.n	80039ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e07f      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d003      	beq.n	800398e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800398a:	2b03      	cmp	r3, #3
 800398c:	d107      	bne.n	800399e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e06f      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e067      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ae:	4b37      	ldr	r3, [pc, #220]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f023 0203 	bic.w	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4934      	ldr	r1, [pc, #208]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c0:	f7fe fa50 	bl	8001e64 <HAL_GetTick>
 80039c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	e00a      	b.n	80039de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c8:	f7fe fa4c 	bl	8001e64 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e04f      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039de:	4b2b      	ldr	r3, [pc, #172]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 020c 	and.w	r2, r3, #12
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d1eb      	bne.n	80039c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f0:	4b25      	ldr	r3, [pc, #148]	@ (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d20c      	bcs.n	8003a18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b22      	ldr	r3, [pc, #136]	@ (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b20      	ldr	r3, [pc, #128]	@ (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e032      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a24:	4b19      	ldr	r3, [pc, #100]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	4916      	ldr	r1, [pc, #88]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d009      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a42:	4b12      	ldr	r3, [pc, #72]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	490e      	ldr	r1, [pc, #56]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a56:	f000 f821 	bl	8003a9c <HAL_RCC_GetSysClockFreq>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	490a      	ldr	r1, [pc, #40]	@ (8003a90 <HAL_RCC_ClockConfig+0x1c0>)
 8003a68:	5ccb      	ldrb	r3, [r1, r3]
 8003a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6e:	4a09      	ldr	r2, [pc, #36]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a72:	4b09      	ldr	r3, [pc, #36]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe f9b0 	bl	8001ddc <HAL_InitTick>

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40023c00 	.word	0x40023c00
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	08004408 	.word	0x08004408
 8003a94:	2000003c 	.word	0x2000003c
 8003a98:	20000040 	.word	0x20000040

08003a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa0:	b090      	sub	sp, #64	@ 0x40
 8003aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aac:	2300      	movs	r3, #0
 8003aae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ab4:	4b59      	ldr	r3, [pc, #356]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 030c 	and.w	r3, r3, #12
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d00d      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0x40>
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	f200 80a1 	bhi.w	8003c08 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d003      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ace:	e09b      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ad0:	4b53      	ldr	r3, [pc, #332]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003ad4:	e09b      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ad6:	4b53      	ldr	r3, [pc, #332]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ada:	e098      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003adc:	4b4f      	ldr	r3, [pc, #316]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ae4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ae6:	4b4d      	ldr	r3, [pc, #308]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d028      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af2:	4b4a      	ldr	r3, [pc, #296]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	099b      	lsrs	r3, r3, #6
 8003af8:	2200      	movs	r2, #0
 8003afa:	623b      	str	r3, [r7, #32]
 8003afc:	627a      	str	r2, [r7, #36]	@ 0x24
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b04:	2100      	movs	r1, #0
 8003b06:	4b47      	ldr	r3, [pc, #284]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b08:	fb03 f201 	mul.w	r2, r3, r1
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	fb00 f303 	mul.w	r3, r0, r3
 8003b12:	4413      	add	r3, r2
 8003b14:	4a43      	ldr	r2, [pc, #268]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b16:	fba0 1202 	umull	r1, r2, r0, r2
 8003b1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b1c:	460a      	mov	r2, r1
 8003b1e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b22:	4413      	add	r3, r2
 8003b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b28:	2200      	movs	r2, #0
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	61fa      	str	r2, [r7, #28]
 8003b2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b36:	f7fc ffc5 	bl	8000ac4 <__aeabi_uldivmod>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4613      	mov	r3, r2
 8003b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b42:	e053      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b44:	4b35      	ldr	r3, [pc, #212]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	099b      	lsrs	r3, r3, #6
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	617a      	str	r2, [r7, #20]
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b56:	f04f 0b00 	mov.w	fp, #0
 8003b5a:	4652      	mov	r2, sl
 8003b5c:	465b      	mov	r3, fp
 8003b5e:	f04f 0000 	mov.w	r0, #0
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	0159      	lsls	r1, r3, #5
 8003b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b6c:	0150      	lsls	r0, r2, #5
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	ebb2 080a 	subs.w	r8, r2, sl
 8003b76:	eb63 090b 	sbc.w	r9, r3, fp
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b8e:	ebb2 0408 	subs.w	r4, r2, r8
 8003b92:	eb63 0509 	sbc.w	r5, r3, r9
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	00eb      	lsls	r3, r5, #3
 8003ba0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ba4:	00e2      	lsls	r2, r4, #3
 8003ba6:	4614      	mov	r4, r2
 8003ba8:	461d      	mov	r5, r3
 8003baa:	eb14 030a 	adds.w	r3, r4, sl
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	eb45 030b 	adc.w	r3, r5, fp
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	028b      	lsls	r3, r1, #10
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bcc:	4621      	mov	r1, r4
 8003bce:	028a      	lsls	r2, r1, #10
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	60fa      	str	r2, [r7, #12]
 8003bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003be0:	f7fc ff70 	bl	8000ac4 <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4613      	mov	r3, r2
 8003bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bec:	4b0b      	ldr	r3, [pc, #44]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	0c1b      	lsrs	r3, r3, #16
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003bfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c06:	e002      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c08:	4b05      	ldr	r3, [pc, #20]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3740      	adds	r7, #64	@ 0x40
 8003c14:	46bd      	mov	sp, r7
 8003c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	00f42400 	.word	0x00f42400
 8003c24:	017d7840 	.word	0x017d7840

08003c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c2c:	4b03      	ldr	r3, [pc, #12]	@ (8003c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	2000003c 	.word	0x2000003c

08003c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c44:	f7ff fff0 	bl	8003c28 <HAL_RCC_GetHCLKFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b05      	ldr	r3, [pc, #20]	@ (8003c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	0a9b      	lsrs	r3, r3, #10
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	4903      	ldr	r1, [pc, #12]	@ (8003c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c56:	5ccb      	ldrb	r3, [r1, r3]
 8003c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40023800 	.word	0x40023800
 8003c64:	08004418 	.word	0x08004418

08003c68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e041      	b.n	8003cfe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd ffba 	bl	8001c08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	f000 f8f0 	bl	8003e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e0ae      	b.n	8003e84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b0c      	cmp	r3, #12
 8003d32:	f200 809f 	bhi.w	8003e74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d36:	a201      	add	r2, pc, #4	@ (adr r2, 8003d3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3c:	08003d71 	.word	0x08003d71
 8003d40:	08003e75 	.word	0x08003e75
 8003d44:	08003e75 	.word	0x08003e75
 8003d48:	08003e75 	.word	0x08003e75
 8003d4c:	08003db1 	.word	0x08003db1
 8003d50:	08003e75 	.word	0x08003e75
 8003d54:	08003e75 	.word	0x08003e75
 8003d58:	08003e75 	.word	0x08003e75
 8003d5c:	08003df3 	.word	0x08003df3
 8003d60:	08003e75 	.word	0x08003e75
 8003d64:	08003e75 	.word	0x08003e75
 8003d68:	08003e75 	.word	0x08003e75
 8003d6c:	08003e33 	.word	0x08003e33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68b9      	ldr	r1, [r7, #8]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f914 	bl	8003fa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0208 	orr.w	r2, r2, #8
 8003d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0204 	bic.w	r2, r2, #4
 8003d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6999      	ldr	r1, [r3, #24]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	619a      	str	r2, [r3, #24]
      break;
 8003dae:	e064      	b.n	8003e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 f95a 	bl	8004070 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6999      	ldr	r1, [r3, #24]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	021a      	lsls	r2, r3, #8
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	619a      	str	r2, [r3, #24]
      break;
 8003df0:	e043      	b.n	8003e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 f9a5 	bl	8004148 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0208 	orr.w	r2, r2, #8
 8003e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0204 	bic.w	r2, r2, #4
 8003e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69d9      	ldr	r1, [r3, #28]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	61da      	str	r2, [r3, #28]
      break;
 8003e30:	e023      	b.n	8003e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 f9ef 	bl	800421c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69da      	ldr	r2, [r3, #28]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69da      	ldr	r2, [r3, #28]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69d9      	ldr	r1, [r3, #28]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	021a      	lsls	r2, r3, #8
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	61da      	str	r2, [r3, #28]
      break;
 8003e72:	e002      	b.n	8003e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	75fb      	strb	r3, [r7, #23]
      break;
 8003e78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a3a      	ldr	r2, [pc, #232]	@ (8003f88 <TIM_Base_SetConfig+0xfc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00f      	beq.n	8003ec4 <TIM_Base_SetConfig+0x38>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eaa:	d00b      	beq.n	8003ec4 <TIM_Base_SetConfig+0x38>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a37      	ldr	r2, [pc, #220]	@ (8003f8c <TIM_Base_SetConfig+0x100>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d007      	beq.n	8003ec4 <TIM_Base_SetConfig+0x38>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a36      	ldr	r2, [pc, #216]	@ (8003f90 <TIM_Base_SetConfig+0x104>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_Base_SetConfig+0x38>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a35      	ldr	r2, [pc, #212]	@ (8003f94 <TIM_Base_SetConfig+0x108>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d108      	bne.n	8003ed6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8003f88 <TIM_Base_SetConfig+0xfc>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d01b      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee4:	d017      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a28      	ldr	r2, [pc, #160]	@ (8003f8c <TIM_Base_SetConfig+0x100>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a27      	ldr	r2, [pc, #156]	@ (8003f90 <TIM_Base_SetConfig+0x104>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00f      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a26      	ldr	r2, [pc, #152]	@ (8003f94 <TIM_Base_SetConfig+0x108>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00b      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a25      	ldr	r2, [pc, #148]	@ (8003f98 <TIM_Base_SetConfig+0x10c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a24      	ldr	r2, [pc, #144]	@ (8003f9c <TIM_Base_SetConfig+0x110>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <TIM_Base_SetConfig+0x8a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a23      	ldr	r2, [pc, #140]	@ (8003fa0 <TIM_Base_SetConfig+0x114>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d108      	bne.n	8003f28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a0e      	ldr	r2, [pc, #56]	@ (8003f88 <TIM_Base_SetConfig+0xfc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d103      	bne.n	8003f5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d105      	bne.n	8003f7a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f023 0201 	bic.w	r2, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	611a      	str	r2, [r3, #16]
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800
 8003f94:	40000c00 	.word	0x40000c00
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40014400 	.word	0x40014400
 8003fa0:	40014800 	.word	0x40014800

08003fa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f023 0201 	bic.w	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0303 	bic.w	r3, r3, #3
 8003fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f023 0302 	bic.w	r3, r3, #2
 8003fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800406c <TIM_OC1_SetConfig+0xc8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d10c      	bne.n	800401a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f023 0308 	bic.w	r3, r3, #8
 8004006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f023 0304 	bic.w	r3, r3, #4
 8004018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a13      	ldr	r2, [pc, #76]	@ (800406c <TIM_OC1_SetConfig+0xc8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d111      	bne.n	8004046 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	621a      	str	r2, [r3, #32]
}
 8004060:	bf00      	nop
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	40010000 	.word	0x40010000

08004070 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	f023 0210 	bic.w	r2, r3, #16
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800409e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f023 0320 	bic.w	r3, r3, #32
 80040ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004144 <TIM_OC2_SetConfig+0xd4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d10d      	bne.n	80040ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a15      	ldr	r2, [pc, #84]	@ (8004144 <TIM_OC2_SetConfig+0xd4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d113      	bne.n	800411c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004102:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	621a      	str	r2, [r3, #32]
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40010000 	.word	0x40010000

08004148 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0303 	bic.w	r3, r3, #3
 800417e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	021b      	lsls	r3, r3, #8
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004218 <TIM_OC3_SetConfig+0xd0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d10d      	bne.n	80041c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	021b      	lsls	r3, r3, #8
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a14      	ldr	r2, [pc, #80]	@ (8004218 <TIM_OC3_SetConfig+0xd0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d113      	bne.n	80041f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	621a      	str	r2, [r3, #32]
}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	40010000 	.word	0x40010000

0800421c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800424a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	031b      	lsls	r3, r3, #12
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a10      	ldr	r2, [pc, #64]	@ (80042b8 <TIM_OC4_SetConfig+0x9c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d109      	bne.n	8004290 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004282:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	019b      	lsls	r3, r3, #6
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	621a      	str	r2, [r3, #32]
}
 80042aa:	bf00      	nop
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40010000 	.word	0x40010000

080042bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e050      	b.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1c      	ldr	r2, [pc, #112]	@ (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d018      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004320:	d013      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a18      	ldr	r2, [pc, #96]	@ (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d00e      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a16      	ldr	r2, [pc, #88]	@ (800438c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d009      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a15      	ldr	r2, [pc, #84]	@ (8004390 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d004      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a13      	ldr	r2, [pc, #76]	@ (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d10c      	bne.n	8004364 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	4313      	orrs	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40010000 	.word	0x40010000
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800
 8004390:	40000c00 	.word	0x40000c00
 8004394:	40014000 	.word	0x40014000

08004398 <memset>:
 8004398:	4402      	add	r2, r0
 800439a:	4603      	mov	r3, r0
 800439c:	4293      	cmp	r3, r2
 800439e:	d100      	bne.n	80043a2 <memset+0xa>
 80043a0:	4770      	bx	lr
 80043a2:	f803 1b01 	strb.w	r1, [r3], #1
 80043a6:	e7f9      	b.n	800439c <memset+0x4>

080043a8 <__libc_init_array>:
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	4d0d      	ldr	r5, [pc, #52]	@ (80043e0 <__libc_init_array+0x38>)
 80043ac:	4c0d      	ldr	r4, [pc, #52]	@ (80043e4 <__libc_init_array+0x3c>)
 80043ae:	1b64      	subs	r4, r4, r5
 80043b0:	10a4      	asrs	r4, r4, #2
 80043b2:	2600      	movs	r6, #0
 80043b4:	42a6      	cmp	r6, r4
 80043b6:	d109      	bne.n	80043cc <__libc_init_array+0x24>
 80043b8:	4d0b      	ldr	r5, [pc, #44]	@ (80043e8 <__libc_init_array+0x40>)
 80043ba:	4c0c      	ldr	r4, [pc, #48]	@ (80043ec <__libc_init_array+0x44>)
 80043bc:	f000 f818 	bl	80043f0 <_init>
 80043c0:	1b64      	subs	r4, r4, r5
 80043c2:	10a4      	asrs	r4, r4, #2
 80043c4:	2600      	movs	r6, #0
 80043c6:	42a6      	cmp	r6, r4
 80043c8:	d105      	bne.n	80043d6 <__libc_init_array+0x2e>
 80043ca:	bd70      	pop	{r4, r5, r6, pc}
 80043cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d0:	4798      	blx	r3
 80043d2:	3601      	adds	r6, #1
 80043d4:	e7ee      	b.n	80043b4 <__libc_init_array+0xc>
 80043d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043da:	4798      	blx	r3
 80043dc:	3601      	adds	r6, #1
 80043de:	e7f2      	b.n	80043c6 <__libc_init_array+0x1e>
 80043e0:	08004428 	.word	0x08004428
 80043e4:	08004428 	.word	0x08004428
 80043e8:	08004428 	.word	0x08004428
 80043ec:	0800442c 	.word	0x0800442c

080043f0 <_init>:
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f2:	bf00      	nop
 80043f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f6:	bc08      	pop	{r3}
 80043f8:	469e      	mov	lr, r3
 80043fa:	4770      	bx	lr

080043fc <_fini>:
 80043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fe:	bf00      	nop
 8004400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004402:	bc08      	pop	{r3}
 8004404:	469e      	mov	lr, r3
 8004406:	4770      	bx	lr
